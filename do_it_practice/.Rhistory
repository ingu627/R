var2 = c(2, 3, 2))
df_raw
# install.packages("dplyr")  # dplyr 설치
library(dplyr)             # dplyr 로드
df_new <- df_raw  # 복사본 생성
df_new            # 출력
df_new <- rename(df_new, v2 = var2)  # var2를 v2로 수정
df_new
## -------------------------------------------------------------------- ##
df <- data.frame(var1 = c(4, 3, 8),
var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
df
df$var_mean <- (df$var1 + df$var2)/2  # var_mean 파생변수 생성
df
## -------------------------------------------------------------------- ##
mpg$total <- (mpg$cty + mpg$hwy)/2  # 통합 연비 변수 생성
head(mpg)
mean(mpg$total)  # 통합 연비 변수 평균
mean(mpg$total)  # 통합 연비 변수 평균
## -------------------------------------------------------------------- ##
summary(mpg$total)  # 요약 통계량 산출
hist(mpg$total)     # 히스토그램 생성
# 20이상이면 pass, 그렇지 않으면 fail 부여
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 20)     # 데이터 확인
table(mpg$test)   # 연비 합격 빈도표 생성
mpg&total
mpg$total
# R에는 series가 없다. 벡터라 한다.
names(mpg)
table(mpg$test)   # 연비 합격 빈도표 생성
qplot(mpg$test)   # 연비 합격 빈도 막대 그래프 생성
## -------------------------------------------------------------------- ##
# total을 기준으로 A, B, C 등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
head(mpg, 20)     # 데이터 확인
## -------------------------------------------------------------------- ##
# 1.데이터 준비, 패키지 준비
mpg <- as.data.frame(ggplot2::mpg)  # 데이터 불러오기
library(dplyr)                      # dplyr 로드
library(ggplot2)                    # ggplot2 로드
# 2.데이터 파악
head(mpg)     # Raw 데이터 앞부분
tail(mpg)     # Raw 데이터 뒷부분
View(mpg)     # Raw 데이터 뷰어창에서 확인
dim(mpg)      # 차원
str(mpg)      # 속성
summary(mpg)  # 요약 통계량
# 3.변수명 수정
mpg <- rename(mpg, company = manufacturer)
# 4.파생변수 생성
mpg$total <- (mpg$cty + mpg$hwy)/2                   # 변수 조합
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")  # 조건문 활용
# 5.빈도 확인
table(mpg$test)  # 빈도표 출력
qplot(mpg$test)  # 막대 그래프 생성
## -------------------------------------------------------------------- ##
df_csv_exam <- read.csv("./data/csv_exam.csv")
df_csv_exam
rnorm(100)
mean(rnorm(100))
std(rnorm(100))
x <- matrix(rnorm(100), nrow=5)
x #5행 20열(5건의 데이터, 20차원 데이터라고 가정하자)
dist(x)
x1 <- c(10,20,1,2,3,4)
y1<-c(5,6,7,8,9,10)
a<-rbind(x1, y1)
a
dist(a)
read.csv('F:/data/snsdata.csv')
teens<-read.csv('F:/data/snsdata.csv')
teens
str(teens)
teens$gender
table(teens$gender)
table(teens$gender, useNA = 'ifany')
mean(rnorm(100))
x <- matrix(rnorm(100), nrow=5)
x #5행 20열(5건의 데이터, 20차원 데이터라고 가정하자)
dist(x)
x1 <- c(10,20,1,2,3,4)
y1<-c(5,6,7,8,9,10)
a<-rbind(x1, y1)
a
dist(a)
5*5
5*5 + 14*14 + 6*6 + 6*6 + 6*6 + 6*6
sqrt(365)
teens<-read.csv('F:/data/snsdata.csv')
str(teens)
table(teens$gender, useNA = 'ifany')
summary(teens$age)
teens$age<-ifelse(teens$age>=13 & teens$age<20, teens$age, NA)
summary(teens$age)
mean(teens$age)
mean(teens$age, na.rm=TRUE)
teens$gender
#성별 값 자체에 초점을 두고 (NA 빼고)
teens$female <- ifelse(teens$gender=='F' & !is.na(teens$gender),1,0)
table(teens$female) #여성인지 아닌지
teens$no_gender<-ifelse( is.na(teens$gender), 1, 0)
table(teens$no_gender) #NA인지 아닌지
table(teens$gender, useNA = "ifany")
table(teens$female, useNA = "ifany")
table(teens$no_gender, useNA = "ifany")
str(teens)
aggregate(data=teens, age ~ gradyear, mean )
aggregate(data=teens, age ~ gradyear, mean, na.rm=TRUE)
ave_age<-ave(teens$age, teens$gradyear, FUN=function(x) mean(x, na.rm=TRUE))
# 2006 -> 18. XX
# 2007
# 2008
# 2009
teens$age
table(ave_age)
teens$age<-ifelse(is.na(teens$age), ave_age, teens$age)
# 졸업년도 실제나이(age) 친구들의평균나이(avg_age)
# 2006       18.9      18.8
# 2006       18.5      18.8
# 2006       18.1      18.8
# 2006        NA       18.8
# ...              ...
# 2009       15.3     15.8
summary(teens$age)
head(teens,5)
interests<-teens[5:40]
interests
str(interests)
summary(interests)
apply(interests, 2, min)
apply(interests, 2, max)
apply(interests, 2, max)-apply(interests, 2, min)
scale(interests)
class(scale(interests))
interests_z<-as.data.frame(lapply(interests, scale))
head(interests_z,5)
summary(interests$basketball)
summary(interests_z$basketball)
set.seed(12345)
teen_clusters<-kmeans(interests_z, 5) #5개 클러스터 생성
teen_clusters
teen_clusters$cluster
teen_clusters$centers
teen_clusters$totss
head(teens,5)
#insight 추출(클러스터의 특징을 추출)
aggregate(data=teens, age ~ cluster, mean )
#         ( 데이터,  관심있는변수 ~ 그룹화변수, 적용함수)
aggregate(data=teens, female ~ cluster, mean )
aggregate(data=teens, friends ~ cluster, mean )
teens
View(teens)
rnorm(100)
# 100개의 정규분포 랜덤난수 생성
matrix(rnorm(100), nrow=5)
# 100개의 정규분포 랜덤난수 생성
a=matrix(rnorm(100), nrow=5) # 5행 20열
a
# 거리 행렬 구하기
dist(a)
# dist : 거리 행렬 구하기
hclust(dist(a), method = 'single')
# dist : 거리 행렬 구하기
plot(hclust(dist(a), method = 'single'))
# single : 최단 거리
# complete : 최장거리
# average : 평균
plot(hclust(dist(a), method = 'complete'))
# dist : 거리 행렬 구하기
plot(hclust(dist(a), method = 'single'))
# single : 최단 거리
# complete : 최장거리
# average : 평균
plot(hclust(dist(a), method = 'complete'))
plot(hclust(dist(a), method = 'average'))
install.packages('mlbench')
# install.packages('mlbench')
library(mlbench)
Glass
# install.packages('mlbench')
library(mlbench)
Glass
Glass
glass
Glass
Glass
data(Glass)
Glass
mydata = Glass
head(mydata, 5)
unique(mydata)
unique(mydata$Type)
table(mydata$Type)
# 수치데이터만 스케일
mydata[, 10]
# 수치데이터만 스케일
mydata[, -10]
# 수치데이터만 스케일
# -를 붙이면 없어진다.
scale(mydata[, -10])
# 수치데이터만 스케일
# -를 붙이면 없어진다.
s_data= scale(mydata[, -10])
s_data
hclust(dist(s_data), method = 'average')
hc=hclust(dist(s_data), method = 'average')
plot(hc)
plot(hc, hang=-1)
rect.hclust(hc, k-7, border='blue')
rect.hclust(hc, k=7, border='blue')
# 최적의 클러스터 개수를 구함
install.packages('fpc')
library(fpc)
pam(s_data, 2)
cluster:pam(s_data, 2)$silinfo$avg.width
cluster::pam(s_data, 2)$silinfo$avg.width
opt_clust
# 20개의 0으로 초기화
opt_clust=numeric(20)
opt_clust
opt_clust[[k]]=cluster::pam(s_data, k)$silinfo$avg.width
# k는 클러스터의 개수
for(k in 2:20){
opt_clust[[k]]=cluster::pam(s_data, k)$silinfo$avg.width
}
opt_clust
# k는 클러스터의 개수
for(k in 2:20){
opt_clust[k]=cluster::pam(s_data, k)$silinfo$avg.width
}
opt_clust
max(opt_clust)
which.max(opt_clust)
best_num=which.max(opt_clust)
best_num
cat('최적의 클러스터 개수: ', best_num)
iris
#kmearns 클러스터링 - 엘보우 그래프
library(ggplot2)
iris
str(iris)
# 5번째 열 제외
scale(iris[,-5])
# 5번째 열 제외
irisScale=scale(iris[,-5])
irisScale
ggplot(iris,
aes(x=Sepal.Length), y=Sepal.Width)+
geom_point()
ggplot(iris,
aes(x=Sepal.Length), y=Sepal.Width)+
geom_point()
ggplot(iris,
aes(x=Sepal.Length, y=Sepal.Width))+
geom_point()
ggplot(iris,
aes(x=Sepal.Length, y=Sepal.Width, col=Species))+
geom_point()
ggplot(iris,
aes(x=Pepal.Length, y=Pepal.Width, col=Species))+
geom_point()
ggplot(iris,
aes(x=Petal.Length, y=Petal.Width, col=Species))+
geom_point()
kmax=10
for(i in 1:kmax){
irisCluster=kmeans(irisScale, i)
print(irisCluster$tot.withinss)
}
wss=rep(NA, kmax)
wss
rClust[i]=irisCluster$size
for(i in 1:kmax){
irisCluster=kmeans(irisScale, i)
wss[i]=irisCluster$tot.withinss
rClust[i]=irisCluster$size
#withinss : 클러스터 내의 데이터 사이 거리 제곱 합
#tot.withinss : withinss 의 총합
}
rclust=list()
for(i in 1:kmax){
irisCluster=kmeans(irisScale, i)
wss[i]=irisCluster$tot.withinss
rClust[i]=irisCluster$size
#withinss : 클러스터 내의 데이터 사이 거리 제곱 합
#tot.withinss : withinss 의 총합
}
rClust=list()
for(i in 1:kmax){
irisCluster=kmeans(irisScale, i)
wss[i]=irisCluster$tot.withinss
rClust[i]=irisCluster$size
#withinss : 클러스터 내의 데이터 사이 거리 제곱 합
#tot.withinss : withinss 의 총합
}
rClust
for(i in 1:kmax){
irisCluster=kmeans(irisScale, i)
wss[i]=irisCluster$tot.withinss
rClust[[i]]=irisCluster$size
#withinss : 클러스터 내의 데이터 사이 거리 제곱 합
#tot.withinss : withinss 의 총합
}
rClust
plot(1:kmax, wss)
plot(1:kmax, wss, type='b')
kmeans(irisScale, 3)
res=kmeans(irisScale, 3)
str(res)
plot(res)
plot(iris)
plot(iris, col=res$cluster)
iris$Species
res$cluster
table(Predicted=res$cluster, Actual=iris$Species)
read.csv('f:/data/wisc_bc_data.csv')
wbcd=read.csv('f:/data/wisc_bc_data.csv')
str(wbcd)
wbcd[1]
wbcd[-1]
#첫번째 열을 제외한 나머지 열
wbcd=wbcd[-1]
str(wbcd)
table(wbcd$diagnosis)
factor(wbcd$diagnosis) # factor : 범주형으로 바꿈
wbcd$diagnosis
factor(wbcd$diagnosis, labels = c('Benign', 'Malignant'))
factor(wbcd$diagnosis, labels = c('Benign', 'Malignant'), levels=c('B', 'M'))
factor(wbcd$diagnosis, labels = c('Benign', 'Malignant'), levels=c('B', 'M'))
table(wbcd$diagnosis)
# 순서에 맞게 기술
wbcd$diagnosis= factor(wbcd$diagnosis, labels = c('Benign', 'Malignant'), levels=c('B', 'M'))
table(wbcd$diagnosis)
prop.table(table(wbcd$diagnosis))
prop.table(table(wbcd$diagnosis))*100
round(prop.table(table(wbcd$diagnosis))*100,1)
summary(wbcd)
summary(wbcd['radius_mean'])
summary(wbcd['radius_mean', 'area_mean'])
summary(wbcd['radius_mean', 'area_mean', 'smoothness_mean'])
summary(wbcd[c('radius_mean', 'area_mean', 'smoothness_mean')])
normalize<-function(x){
}
normalize(c(1,2,3,4,5))
normalize<-function(x){
return (x-min(x)) / (max(x) - min(x))
}
normalize(c(1,2,3,4,5))
normalize<-function(x){
return ((x-min(x)) / (max(x) - min(x)))
}
normalize(c(1,2,3,4,5))
nromalize(c(10,20,30,40,50))
normalize(c(10,20,30,40,50))
head(wbcd, 3)
lapply(wbcd[2:31], normalize)
# lapply는 리스트형식으로 반환
as.data.frame(lapply(wbcd[2:31], normalize))
class(lapply(wbcd[2:31], normalize))
# lapply는 리스트형식으로 반환
# l = list
wbcd_n=as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd_n)
str(wbcd_n)
nrow(wbcd_n)
str(wbcd_n)
nrow(wbcd_n)
# apply 함수 : 벡터, 행렬,리스트, 데이터프레임 -> 함수 적용 -> 결과 도출
# 1) apply함수 : 행렬의 행 또는 열 방향 함수 적용
sum(1:10)
matrix(1:9, ncol=3)
m=matrix(1:9, ncol=3)
apply(m, 1, sum)
apply(m, 2, sum)
apply(m, 0, sum)
apply(m, 1, sum)
apply(m, 2, sum)
head(iris)
apply(iris[,-5], 2, sum)
colSums(iris[,1:4])
# lapply(벡터/리스트, 함수)
myFunc = function(x){
x*2
}
myFunc(3)
lapply(1:3, myFunc)
unlist(res)
lapply(1:3, function(x){x*2})
lapply(iris[,1:4], sum)
lapply(iris[,1:4], mean)
unlist(lapply(iris[,1:4], mean),2)
matrix(unlist(lapply(iris[,1:4], mean),2))
as.data.frame(matrix(unlist(lapply(iris[,1:4], mean),2)))
lapply(iris[,1:4], mean)
sapply(iris[,1:4], mean)
1:10
1:10 %% 2
1:10 %% 2 == 1
table(1:10 %% 2 == 1)
ifelse(1:10 %% 2 == 0, sum, sum)
table(1:10 %% 2 == 1)
1:10 %% 2 == 1
a=1:10
a[a %% 2 == 1]
sum(a[a %% 2 == 1])
sum(a[a %% 2 == 1])
a[a %% 2 == 1]
a[a %% 2 == 0]
tapply(1:10, x%%2==1)
tapply(1:10, a%%2==1)
a%%2==1
tapply(1:10, a%%2==1, mean)
tapply(iris$Species)
tapply(iris$Species, Sepal.Length)
tapply(iris$Species, iris$Sepal.Length)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
wbcd_train_labels=wbcd[470:569,1]
wbcd_train_labels=wbcd[1:469,1] #knn 모델 생성 과정 사용 데이터
wbcd_test_labels=wbcd[470:569,1] # 모델 테스트 데이터 생성
wbcd_train=wbcd_n[1:469,]
wbcd_test=wbcd_n[470:569,]
wbcd_train_labels=wbcd[1:469,1] #knn 모델 생성 과정 사용 데이터
wbcd_test_labels=wbcd[470:569,1] # 모델 테스트 데이터 생성
knn()
library(class)
pred=knn(train=wbcd_train, test=wbcd_test,
cl=wbcd_train_labels, k=21)
pred
pred #테스트 데이터에 대한 예측값값
wbcd_test_labels #실제값값
install.packages('gmodels')
library(gmodels)
CrossTable(x=wbcd_test_labels, y=pred) #교차표(예측값과 실제값을 비교)
pred
data.frame(pred)
write.csv(data.frame(pred), 'pred.csv)'
read.csv('F:\data\titanic\train.csv')
read.csv('F:/data/titanic/train.csv')
head(read.csv('F:/data/titanic/train.csv'),2)
head(read.csv('F:/data/titanic/test.csv'),2)
head(read.csv('F:/data/titanic/gender_submission.csv'),2)
write.csv(data.frame(pred), 'pred.csv')
train
read.csv('f:/data/titanic/train.csv')
train=read.csv('f:/data/titanic/train.csv')
testread.csv('f:/data/titanic/test.csv')
test=read.csv('f:/data/titanic/test.csv')
str(train)
train.index
head(train)
head(test)
head(train)
str(train)
# name, ticket, fare, cabin, passengerId 제거
train=train[,-c(1,4,9,10,11)]
str(test)
test=test[,-c(1,4,9,10,11)]
train
str(train)
str(test)
str(train$Sex)
table(train$Sex)
library(stringr)
library(magrittr)
train$Sex
train$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
train$Sex
test$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
train$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
test$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
test
test$Sex
test=read.csv('f:/data/titanic/test.csv')
str(test)
test=test[,-c(1,3,8,9,10)]
test$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
test$Sex
sum(is.na(train$Embarked))
str(train$Embarked)
plot(train$Embarked)
library(ggplot2)
plot(train$Embarked)
library(ggplot2)
plot(train$Embarked)
qplot(train$Embarked)
train$Embarked[train$Embarked ==''] = 'S'
library(dummies)
library(fastDummies)
install.packages(fastDummies)
install.packages("fastDummies")
# install.packages("fastDummies")
library(fastDummies)
train[,7]
for_dummy = train[,7]
dum_train = fastDummies.data.frame(train[,6:7]);head(dum_train)
dum_train = fastDummies.data.frame(train[,6:7]) %>%
head(dum_train)
dum_train = dummy.data.frame(train[,6:7]) %>%
head(dum_train)
as.factor(for_dummy)
as.factor(for_dummy)
table(for_dummy)
dummy_cols(for_dummy)
train[,6]
train[,6:7]
