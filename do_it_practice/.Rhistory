letters[1:5]
colnames(mat)<- letters[1:5]
# letters[1:5]
mat
#row는 거래 데이터(장바구니)
#col는 아이템 이름
str(mat)
class(mat)
#행렬 데이터를 transactions 데이터로 변환
as(mat, 'transactions')
#행렬 데이터를 transactions 데이터로 변환
mat.trans<-as(mat, 'transactions')
mat.trans
summary(mat.trans)
mat
mat
inspect(mat.trans)
#데이터프레임 데이터를 transactions 데이터로 변환
as.data.frame(mat)
#데이터프레임 데이터를 transactions 데이터로 변환
df<- as.data.frame(mat)
df.trans<-as(df, 'transactions')
str(df.trans)
inspect(df.trans)
str(df)
#수치(numeric) -> logical
class(sapply(df, as.logical))
#수치(numeric) 데이터가 저장된 데이터프레임-> logical 데이터로 변환된 데이터프레임
# class(sapply(df, as.logical))
as.data.frame(sapply(df, as.logical))
#수치(numeric) 데이터가 저장된 데이터프레임-> logical 데이터로 변환된 데이터프레임
# class(sapply(df, as.logical))
df<- as.data.frame(sapply(df, as.logical))
df.trans<-as(df, 'transactions')
df.trans
summary(df.trans)
inspect(df.trans)
#list 데이터를 transactions 데이터로 변환
mylist <- list(row1=c("a","b","c"),
row2=c("a","d"),
row3=c("b","e"),
row4=c("a","d","e"),
row5=c("b","c","d"))
mylist
mylist.trans<-as(mylist, 'transactions')
summary(mylist.trans)
inspect(mylist.trans)
##################################################
#groceries 데이터 연관 규칙 생성
apriori(groceries, parameter = list(support=0.006, confidence-0.25))
##################################################
#groceries 데이터 연관 규칙 생성
apriori(groceries, parameter = list(support=0.006, confidence=0.25))
##################################################
#groceries 데이터 연관 규칙 생성
groceryrules<- apriori(groceries, parameter = list(support=0.006, confidence=0.25))
groceryrules
inspect(groceryrules[300:350])
inspect(groceryrules[1:10])
summary(groceryrules)
inspect(groceryrules[1:10])
sort(groceryrules)
sort(groceryrules, by='lift')
inspect(sort(groceryrules, by='lift')[1:10])
inspect(sort(groceryrules, by='lift')[1:30])
#관심있는 상품에 대한 연관규칙을 검색
# ex. beef와 함께 묶어서 판매할만한 상품?
beefrules<-subset(groceryrules, items %in% 'beef')
inspect(beefrules)
inspect(sort(beefrules, by='life')[1:5])
inspect(sort(beefrules, by='lift')[1:5])
write(beefrules, file='beefrules.csv', sep=',')
write(beefrules, file='beefrules.csv', sep=',')
#관심있는 상품에 대한 연관규칙을 검색
# ex. beef와 함께 묶어서 판매할만한 상품?
beefrules<-subset(groceryrules, items %in% 'beef')
beefrules
inspect(beefrules)
inspect(sort(beefrules, by='lift')[1:5])
write(beefrules, file='beefrules.csv', sep=',')
getwd()
data(Epub)
Epub
library(arules)
data(Epub)
Epub
# install.packages('arules') #연관 분석을 위한 패키지 설치
library(arules) # read.transactions() 함수 제공
groceries=read.transactions('f:/data/groceries.csv', sep = ',') #트랜잭션 객체 생성
summary(groceries)
groceries
inspect(groceries)
# inspect : 트랜잭션을 배열의 형태로 출력
inspect(groceries[1:10])
##################################################
#groceries 데이터 연관 규칙 생성
groceryrules<- apriori(groceries, parameter = list(support=0.006, confidence=0.25))
groceryrules
inspect(groceryrules[300:350])
inspect(groceryrules[300:350])
library(arules)
data(Epub)
Epub
# 의미있는 규칙들 추출
inspect(Epub)
summary(Epub)
Epub2= apriori(Epub)
Epub2
Epub2= apriori(Epub, parameter = list(supp=0.1, conf=0.8))
Epub2
attributes(Epub2)
Epub2= apriori(Epub, parameter = list(supp=0.06, conf=0.8))
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
itemFrequencyPlot(Epub)
library(arules)
data(Epub)
itemFrequencyPlot(Epub)
itemFrequencyPlot(Epub, topN=20, type='absolute')
itemFrequencyPlot(Epub, support=0.1)
itemFrequencyPlot(Epub, support=0.0.1)
itemFrequencyPlot(Epub, support=0.01)
itemFrequencyPlot(Epub, topN=20, type='absolute')
itemFrequencyPlot(Epub, support=0.01)
itemFrequencyPlot(Epub, support=0.06)
Epub2= apriori(Epub, parameter = list(supp=0.01, conf=0.8))
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
Epub2= apriori(Epub, parameter = list(supp=0.01, conf=0.1))
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
summary(Epub2)
Epub2= apriori(Epub, parameter = list(supp=0.01, conf=0.1))
summary(Epub2)
Epub2= apriori(Epub, parameter = list(supp=0.001, conf=0.1))
summary(Epub2)
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
inspect(head(sort(Epub2, by='lift')))
itemFrequencyPlot(Epub, topN=20, type='absolute')
Epub3<-subset(Epub2, items %in% 'doc_6e8')
inspect(Epub3)
inspect(sort(Epub3, by='lift')[1:5])
library(arules)
data(Epub)
Epub
itemFrequencyPlot(Epub[,])
summary(itemFrequency(Epub[,]))
# Epub2= apriori(Epub, parameter = list(supp=0.001, conf=0.1))
apriori(Epub, parameter = list(support=0.0005, minlen=2))
# Epub2= apriori(Epub, parameter = list(supp=0.001, conf=0.1))
epub.rules= apriori(Epub, parameter = list(support=0.0005, minlen=2))
summary(epub.rules)
inspect(sort(epub.rules, by='lift')[1:50])
con=inspect(sort(epub.rules, by='confidence')[1:50])
sup=inspect(sort(epub.rules, by='support')[1:50])
class(con)
subset(sup, )
lft
lft=inspect(sort(epub.rules, by='lift')[1:50])
con=inspect(sort(epub.rules, by='confidence')[1:50])
sup=inspect(sort(epub.rules, by='support')[1:50])
lft
con
sup
lft
inspect(sort(epub.rules, by='confidence')[1:50])
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
lft
epub.rules
lft=inspect(sort(epub.rules, by='lift')[1:30])
lft
lft=inspect(sort(epub.rules, by='lift'))
lft
summary(epub.rules)
lft=inspect(sort(epub.rules, by='lift'))
lft
lft=inspect(sort(epub.rules, by='lift')[1:50])
con=inspect(sort(epub.rules, by='confidence')[1:50])
sup=inspect(sort(epub.rules, by='support')[1:50])
con
read.csv('f:data/Market_Basket_Optimisation.csv')
library(readxl)
read_excel('f:data/Market_Basket_Optimisation.xlsx')
read_excel('f:data/Market_Basket_Optimisation.csv')
read.csv('f:data/Market_Basket_Optimisation.csv')
library(arules)
read.transactions('f:/data/Market_Basket_Optimisation')
read.transactions('f:/data/Market_Basket_Optimisation.csv')
read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
library(ggplot2)
inspect(basket_data)
inspect(basket_data)[1:50]
itemFrequency(basket_data, type='absolute') # 판매건수
sort(itemFrequency(basket_data, type='absolute')) # 판매건수
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(groceries, topN=20, type='absolute')
itemFrequencyPlot(basket_data, topN=20, type='absolute')
# apriori() : 규칙들을 생성하는 함수
apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
maxlen = 2))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
maxlen = 2))
summary(basket_apr)
inspecct(basket_apr[1:10])
inspect(basket_apr[1:10])
basket_apr_mineralwater = apriori(basket_apr,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
basket_apr_mw = apriori(basket_apr,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
maxlen = 2))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules'
maxlen = 2))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
basket_apr_mw = apriori(basket_apr,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
basket_apr_mw = apriori(basket_data,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
rules_mineralwater <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(rules_mineralwater, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(head(sort(basket_apr, by="lift")))
inspect(basket_apr[1:10])
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
summary(basket_apr)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute')
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10])
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spag <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
inspect(rules_spaghetti)
library(readxl)
library(arules)
library(ggplot2)
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute') # 상위 20개 시각화화
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10]) # mineral water가 가장 많이 언급됨
# mineral water
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
#향상도 기준으로
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
# {eggs, ground beef} ->{spaghetti}
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
# {eggs, ground beef} ->{spaghetti}
# {ground beef, milk} ->{spaghetti}
install.packages('arulesViz')
# install.packages('arulesViz')
library(arulesViz)
plot(rules_mw, method = 'graph')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
plot(rules_mw, method="graph", engine="graphviz")
plot(rules_mw, method="graph", engine="graphviz")
# install.packages('arulesViz')
install.packages('graphviz')
plot(rules_mw, method="grouped matrix')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
plot(rules_mw, method='grouped matrix')
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
q
q
library(readxl)
library(arules)
library(ggplot2)
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute') # 상위 20개 시각화화
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10]) # mineral water가 가장 많이 언급됨
# mineral water
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
# install.packages('arulesViz')
library(arulesViz)
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
plot(rules_mw, method='grouped matrix')
plot(rules_mw, method = 'paracoord')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
plot(rules_eggs, method = 'paracoord')
plot(rules_eggs, method='grouped matrix')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
plot(rules_spaghetti, method = 'paracoord')
plot(rules_spaghetti, method='grouped matrix')
lft=inspect(sort(basket_apr, by='lift')[1:50])
con=inspect(sort(basket_apr, by='confidence')[1:50])
sup=inspect(sort(basket_apr, by='support')[1:50])
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
x = c(8, 3, 6, 6, 9, 4, 3, 9, 3, 4)
y = c(6, 2, 4, 6, 10, 5, 1, 8, 4, 5)
plot(x,y)
cov(x,y)
z = c(-3, -2, -1, 0, 1, 2, 3)
w = c(9, 4, 1, 0, 1, 4, 9).
w = c(9, 4, 1, 0, 1, 4, 9)
cov(z,w)
cor(x,y)
cov(x,y)/(sd(x)*sd(y))
cor(x,y)**2 #상관계수 제곱값인 0
cor(x,y, method='spearman')
cor(x,y, method='kendall')
# p-value는 상관계수가 0이라고 했을 때, 같은 크기의 표본에서
# 관찰된 상관계수보다 더 극단적인 상관계수가 관찰될 확률
# 0.05가 일반적인 임계치
cor.test(x,y)
cars
lm(dist ~ speed)
lm(dist ~ speed, data=cars)
model=lm(dist ~ speed, data=cars)
summary(model)
read.csv('f:/data/crab.csv')
df=read.csv('f:/data/crab.csv')
# fomula = target variable
lm(y ~ sat + weight + width, df)
# fomula = target variable
model=lm(y ~ sat + weight + width, df)
summary(model)
install.packages('car')
# install.packages('car')
library(car)
vif(model)
read.csv('f:/data/challenger.csv')
chal=read.csv('f:/data/challenger.csv')
str(chal)
summary(chal)
table(chal)
table(chal$distress_ct)
plot(x=chal$temperature, y=chal$distress_ct)
lm_chal=lm(distress_ct ~ temperature, data=chal)
summary(lm_chal)
lm_chal$coefficients[1]
lm_chal$coefficients[2]
abline(a=lm_chal$coefficients[1], b=lm_chal$coefficients[2])
abline(a=lm_chal$coefficients[1], b=lm_chal$coefficients[2], col='blue')
insurance = read.csv('f:/data/insurance.csv')
str(insurance)
summary(insurance)
insu = read.csv('f:/data/insurance.csv')
str(insu)
summary(insu)
insu = read.csv('f:/data/insurance.csv', stringsAsFactors = TRUE)
str(insu)
summary(insu)
boxplot(insu$expenses)
hist(insu$expenses)
#상관계수
#cor(x,y)
cor(insu$bmi, insu$expenses)
cor(insu[c('age','bmi','children','expenses')])
pairs(insu[c('age','bmi','children','expenses')])
install.packages('psych')
pairs.panels(insu[c('age','bmi','children','expenses')])
# install.packages('psych')
library(psych)
pairs.panels(insu[c('age','bmi','children','expenses')])
# 다중선형회귀
str(insu)
insu_model=lm(expenses ~ . ,) # .은 expenses을 제외한 나머지 모든 변수
insu_model=lm(expenses ~ . , data=insu) # .은 expenses을 제외한 나머지 모든 변수
insu_model
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
insu$age
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
(insu$age)^2
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
(insu$age)
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
insu$age2=(insu$age)^2
insu
insu$age2
insu$bmi
ifelse(insu$bmi >=30, 1, 0)
bmi30=ifelse(insu$bmi >=30, 1, 0)
lm(expenses~age+sex+bmi30+age2, data=insu)
model=lm(expenses~age+sex+bmi30+age2, data=insu)
summary(model)
