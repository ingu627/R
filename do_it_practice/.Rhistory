library(class)
knn_21_test = knn(train, test, cl=train_y, k=21)
knn_21_test
test_y
# Confusion Matrix 틀 만들기
result <- matrix(NA, nrow = 3, ncol = 3)
rownames(result) <- paste0("real_", levels(train_y))
colnames(result) <- paste0("clsf_", levels(train_y))
# Confusion Matrix 값 입력하기
result[1, 1] <- sum(ifelse(test_y == "setosa" & knn_21_test == "setosa", 1, 0))
result[2, 1] <- sum(ifelse(test_y == "versicolor" & knn_21_test == "setosa", 1, 0))
result[3, 1] <- sum(ifelse(test_y == "virginica" & knn_21_test == "setosa", 1, 0))
result[1, 2] <- sum(ifelse(test_y == "setosa" & knn_21_test == "versicolor", 1, 0))
result[2, 2] <- sum(ifelse(test_y == "versicolor" & knn_21_test == "versicolor", 1, 0))
result[3, 2] <- sum(ifelse(test_y == "virginica" & knn_21_test == "versicolor", 1, 0))
result[1, 3] <- sum(ifelse(test_y == "setosa" & knn_21_test == "virginica", 1, 0))
result[2, 3] <- sum(ifelse(test_y == "versicolor" & knn_21_test == "virginica", 1, 0))
result[3, 3] <- sum(ifelse(test_y == "virginica" & knn_21_test == "virginica", 1, 0))
result
sum(knn_21_test == test_y) / sum(result)
library(ggplot2)
library(dplyr)
STOCK = read.csv('./Uniqlo.csv')
STOCK$Date = as.Date(STOCK$Date)
STOCK = read.csv('./Uniqlo.csv')
read.csv('f:/data/groceries.csv')
install.packages('arules')
# install.packages('arules')
library(arules)
read.transactions('groceries.csv', sep = ',')
read.transactions('f:/data/groceries.csv', sep = ',')
summary(groceries)
groceries=read.transactions('f:/data/groceries.csv', sep = ',')
summary(groceries)
groceries
inspect(groceries)
inspect(groceries[1:10])
itemFrequency(groceries)
itemFrequency(groceries, type='absolute')
itemFrequency(groceries[,1:3])
groceries[,1:3]
itemFrequencyPlot(groceries)
itemFrequencyPlot(groceries, type='absolute')
#가장 많이 팔린 20개 상품 시각화
itemFrequencyPlot(groceries, topN=2, type='absolute')
#가장 많이 팔린 20개 상품 시각화
itemFrequencyPlot(groceries, topN=20, type='absolute')
#지지도가 0.1이상인 상품 시각화
itemFrequencyPlot(groceries, support=0.1)
matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0)
matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0))
matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0))
matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0), ncol=5)
matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0), ncol=5, byrow=TRUE)
mat=matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0), ncol=5, byrow=TRUE)
mat
paste('row', 1:5)
paste0('row', 1:%)
paste0('row', 1:5)
rownames(mat)<-paste0('row', 1:5)
mat
# colnames(mat)<-paste0()
letters
# colnames(mat)<-paste0()
letters[1:5]
colnames(mat)<- letters[1:5]
# letters[1:5]
mat
#row는 거래 데이터(장바구니)
#col는 아이템 이름
str(mat)
class(mat)
#행렬 데이터를 transactions 데이터로 변환
as(mat, 'transactions')
#행렬 데이터를 transactions 데이터로 변환
mat.trans<-as(mat, 'transactions')
mat.trans
summary(mat.trans)
mat
mat
inspect(mat.trans)
#데이터프레임 데이터를 transactions 데이터로 변환
as.data.frame(mat)
#데이터프레임 데이터를 transactions 데이터로 변환
df<- as.data.frame(mat)
df.trans<-as(df, 'transactions')
str(df.trans)
inspect(df.trans)
str(df)
#수치(numeric) -> logical
class(sapply(df, as.logical))
#수치(numeric) 데이터가 저장된 데이터프레임-> logical 데이터로 변환된 데이터프레임
# class(sapply(df, as.logical))
as.data.frame(sapply(df, as.logical))
#수치(numeric) 데이터가 저장된 데이터프레임-> logical 데이터로 변환된 데이터프레임
# class(sapply(df, as.logical))
df<- as.data.frame(sapply(df, as.logical))
df.trans<-as(df, 'transactions')
df.trans
summary(df.trans)
inspect(df.trans)
#list 데이터를 transactions 데이터로 변환
mylist <- list(row1=c("a","b","c"),
row2=c("a","d"),
row3=c("b","e"),
row4=c("a","d","e"),
row5=c("b","c","d"))
mylist
mylist.trans<-as(mylist, 'transactions')
summary(mylist.trans)
inspect(mylist.trans)
##################################################
#groceries 데이터 연관 규칙 생성
apriori(groceries, parameter = list(support=0.006, confidence-0.25))
##################################################
#groceries 데이터 연관 규칙 생성
apriori(groceries, parameter = list(support=0.006, confidence=0.25))
##################################################
#groceries 데이터 연관 규칙 생성
groceryrules<- apriori(groceries, parameter = list(support=0.006, confidence=0.25))
groceryrules
inspect(groceryrules[300:350])
inspect(groceryrules[1:10])
summary(groceryrules)
inspect(groceryrules[1:10])
sort(groceryrules)
sort(groceryrules, by='lift')
inspect(sort(groceryrules, by='lift')[1:10])
inspect(sort(groceryrules, by='lift')[1:30])
#관심있는 상품에 대한 연관규칙을 검색
# ex. beef와 함께 묶어서 판매할만한 상품?
beefrules<-subset(groceryrules, items %in% 'beef')
inspect(beefrules)
inspect(sort(beefrules, by='life')[1:5])
inspect(sort(beefrules, by='lift')[1:5])
write(beefrules, file='beefrules.csv', sep=',')
write(beefrules, file='beefrules.csv', sep=',')
#관심있는 상품에 대한 연관규칙을 검색
# ex. beef와 함께 묶어서 판매할만한 상품?
beefrules<-subset(groceryrules, items %in% 'beef')
beefrules
inspect(beefrules)
inspect(sort(beefrules, by='lift')[1:5])
write(beefrules, file='beefrules.csv', sep=',')
getwd()
data(Epub)
Epub
library(arules)
data(Epub)
Epub
# install.packages('arules') #연관 분석을 위한 패키지 설치
library(arules) # read.transactions() 함수 제공
groceries=read.transactions('f:/data/groceries.csv', sep = ',') #트랜잭션 객체 생성
summary(groceries)
groceries
inspect(groceries)
# inspect : 트랜잭션을 배열의 형태로 출력
inspect(groceries[1:10])
##################################################
#groceries 데이터 연관 규칙 생성
groceryrules<- apriori(groceries, parameter = list(support=0.006, confidence=0.25))
groceryrules
inspect(groceryrules[300:350])
inspect(groceryrules[300:350])
library(arules)
data(Epub)
Epub
# 의미있는 규칙들 추출
inspect(Epub)
summary(Epub)
Epub2= apriori(Epub)
Epub2
Epub2= apriori(Epub, parameter = list(supp=0.1, conf=0.8))
Epub2
attributes(Epub2)
Epub2= apriori(Epub, parameter = list(supp=0.06, conf=0.8))
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
itemFrequencyPlot(Epub)
library(arules)
data(Epub)
itemFrequencyPlot(Epub)
itemFrequencyPlot(Epub, topN=20, type='absolute')
itemFrequencyPlot(Epub, support=0.1)
itemFrequencyPlot(Epub, support=0.0.1)
itemFrequencyPlot(Epub, support=0.01)
itemFrequencyPlot(Epub, topN=20, type='absolute')
itemFrequencyPlot(Epub, support=0.01)
itemFrequencyPlot(Epub, support=0.06)
Epub2= apriori(Epub, parameter = list(supp=0.01, conf=0.8))
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
Epub2= apriori(Epub, parameter = list(supp=0.01, conf=0.1))
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
summary(Epub2)
Epub2= apriori(Epub, parameter = list(supp=0.01, conf=0.1))
summary(Epub2)
Epub2= apriori(Epub, parameter = list(supp=0.001, conf=0.1))
summary(Epub2)
attributes(Epub2)
inspect(head(sort(Epub2, by='lift')))
inspect(head(sort(Epub2, by='lift')))
itemFrequencyPlot(Epub, topN=20, type='absolute')
Epub3<-subset(Epub2, items %in% 'doc_6e8')
inspect(Epub3)
inspect(sort(Epub3, by='lift')[1:5])
library(arules)
data(Epub)
Epub
itemFrequencyPlot(Epub[,])
summary(itemFrequency(Epub[,]))
# Epub2= apriori(Epub, parameter = list(supp=0.001, conf=0.1))
apriori(Epub, parameter = list(support=0.0005, minlen=2))
# Epub2= apriori(Epub, parameter = list(supp=0.001, conf=0.1))
epub.rules= apriori(Epub, parameter = list(support=0.0005, minlen=2))
summary(epub.rules)
inspect(sort(epub.rules, by='lift')[1:50])
con=inspect(sort(epub.rules, by='confidence')[1:50])
sup=inspect(sort(epub.rules, by='support')[1:50])
class(con)
subset(sup, )
lft
lft=inspect(sort(epub.rules, by='lift')[1:50])
con=inspect(sort(epub.rules, by='confidence')[1:50])
sup=inspect(sort(epub.rules, by='support')[1:50])
lft
con
sup
lft
inspect(sort(epub.rules, by='confidence')[1:50])
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
lft
epub.rules
lft=inspect(sort(epub.rules, by='lift')[1:30])
lft
lft=inspect(sort(epub.rules, by='lift'))
lft
summary(epub.rules)
lft=inspect(sort(epub.rules, by='lift'))
lft
lft=inspect(sort(epub.rules, by='lift')[1:50])
con=inspect(sort(epub.rules, by='confidence')[1:50])
sup=inspect(sort(epub.rules, by='support')[1:50])
con
read.csv('f:data/Market_Basket_Optimisation.csv')
library(readxl)
read_excel('f:data/Market_Basket_Optimisation.xlsx')
read_excel('f:data/Market_Basket_Optimisation.csv')
read.csv('f:data/Market_Basket_Optimisation.csv')
library(arules)
read.transactions('f:/data/Market_Basket_Optimisation')
read.transactions('f:/data/Market_Basket_Optimisation.csv')
read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
library(ggplot2)
inspect(basket_data)
inspect(basket_data)[1:50]
itemFrequency(basket_data, type='absolute') # 판매건수
sort(itemFrequency(basket_data, type='absolute')) # 판매건수
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(groceries, topN=20, type='absolute')
itemFrequencyPlot(basket_data, topN=20, type='absolute')
# apriori() : 규칙들을 생성하는 함수
apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
maxlen = 2))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
maxlen = 2))
summary(basket_apr)
inspecct(basket_apr[1:10])
inspect(basket_apr[1:10])
basket_apr_mineralwater = apriori(basket_apr,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
basket_apr_mw = apriori(basket_apr,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
maxlen = 2))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules'
maxlen = 2))
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
basket_apr_mw = apriori(basket_apr,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
basket_apr_mw = apriori(basket_data,
parameter = list(supp=0.008, conf=0.25),
apperance = list(default = 'lhs', rhs = 'mineral water'))
rules_mineralwater <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(rules_mineralwater, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(head(sort(basket_apr, by="lift")))
inspect(basket_apr[1:10])
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
summary(basket_apr)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute')
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10])
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spag <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
inspect(rules_spaghetti)
library(readxl)
library(arules)
library(ggplot2)
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute') # 상위 20개 시각화화
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10]) # mineral water가 가장 많이 언급됨
# mineral water
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
#향상도 기준으로
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
# {eggs, ground beef} ->{spaghetti}
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
# {eggs, ground beef} ->{spaghetti}
# {ground beef, milk} ->{spaghetti}
install.packages('arulesViz')
# install.packages('arulesViz')
library(arulesViz)
plot(rules_mw, method = 'graph')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
plot(rules_mw, method="graph", engine="graphviz")
plot(rules_mw, method="graph", engine="graphviz")
# install.packages('arulesViz')
install.packages('graphviz')
plot(rules_mw, method="grouped matrix')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
plot(rules_mw, method='grouped matrix')
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
q
q
library(readxl)
library(arules)
library(ggplot2)
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute') # 상위 20개 시각화화
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10]) # mineral water가 가장 많이 언급됨
# mineral water
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
# install.packages('arulesViz')
library(arulesViz)
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
plot(rules_mw, method='grouped matrix')
plot(rules_mw, method = 'paracoord')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
plot(rules_eggs, method = 'paracoord')
plot(rules_eggs, method='grouped matrix')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
plot(rules_spaghetti, method = 'paracoord')
plot(rules_spaghetti, method='grouped matrix')
lft=inspect(sort(basket_apr, by='lift')[1:50])
con=inspect(sort(basket_apr, by='confidence')[1:50])
sup=inspect(sort(basket_apr, by='support')[1:50])
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
