write.csv(submission, 'submission.csv', row.names = F)
titanic_survive = knn(train, test, cl=train_y, k=13)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
titanic_survive = knn(train, test, cl=train_y, k=3)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
test
sd(12)
sd([12,12,15])
sd(c(12,12,15))
train
scale(train)
train = scale(train)
test = scale(test)
titanic_survive = knn(train, test, cl=train_y, k=3)
titanic_survive = knn(train, test, cl=train_y, k=12)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
titanic_survive = knn(train, test, cl=train_y, k=25)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
titanic_survive = knn(train, test, cl=train_y, k=9)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
titanic_survive = knn(train, test, cl=train_y, k=5)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
titanic_survive = knn(train, test, cl=train_y, k=12)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
titanic_survive = knn(train, test, cl=train_y, k=12)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
train=read.csv('f:/data/titanic/train.csv')
test=read.csv('f:/data/titanic/test.csv')
str(train)
head(train)
str(test)
head(test)
# name, ticket, fare, cabin, passengerId 제거
train=train[,-c(1,4,9,10,11)]
test=test[,-c(1,3,8,9,10)]
str(train$Sex)
table(train$Sex)
library(stringr)
library(magrittr)
train$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
test$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
train$Sex = as.integer(train$Sex)
test$Sex = as.integer(test$Sex)
str(train$Embarked)
sum(is.na(train$Embarked))
library(ggplot2)
qplot(train$Embarked)
train$Embarked[train$Embarked ==''] = 'S'
# install.packages("fastDummies")
library(fastDummies)
for_dummy = train[,7]
table(for_dummy)
for_dummy=dummy_cols(for_dummy)[,-1]
train = cbind(train, for_dummy)
train = train[,-7]
train
test$Embarked[test$Embarked ==''] = 'S'
for_dummy = test[,6]
table(for_dummy)
for_dummy=dummy_cols(for_dummy)[,-1]
test = cbind(test, for_dummy)
test = test[,-6]
test
train_age_mean = mean(train$Age, na.rm=TRUE)
train$Age[is.na(train$Age)] = train_age_mean
test_age_mean = mean(test$Age, na.rm=TRUE)
test$Age[is.na(test$Age)] = test_age_mean
head(test$Age)
train$Age = as.integer(train$Age)
test$Age = as.integer(test$Age)
age_level = c()
for(x in 1:length(train$Age)){
if(train$Age[x]<18){
age_level[x] ='child'
}
else if(train$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
train = cbind(train, dum_old)
train
age_level = c()
for(x in 1:length(test$Age)){
if(test$Age[x]<18){
age_level[x] ='child'
}
else if(test$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
test = cbind(test, dum_old)
test
normalize=function(x){
return ((x-min(x)) / (max(x)-min(x)))
}
train$Pclass = normalize(train$Pclass)
test$Pclass = normalize(test$Pclass)
train_y = train$Survived
train = train[,-c(1,4)]
test = test[, -c(3)]
str(train)
str(test)
matrix(train)
matrix(test)
train = scale(train)
test = scale(test)
library(class)
titanic_survive = knn(train, test, cl=train_y, k=)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
train= read.csv('f:/data/titanic/train.csv')
train
test= read.csv('f:/data/titanic/test.csv')
str(train)
train[,-c(4,9,11)]
train=train[,-c(4,9,11)]
st(test)
str(test)
test=test[,-c(3,8,10)]
train$Sex = ifelse(test$Sex == 'male', 1, 0)
train$Sex <- ifelse(test$Sex == 'male', 1, 0)
train$Sex= ifelse(test$Sex == 'male', 1, 0)
train$Sex
train$Sex= ifelse(train$Sex == 'male', 1, 0)
test$Sex= ifelse(test$Sex == 'male', 1, 0)
table(train$Embarked)
sum(is.na(train$Embarked))
train %>%
group by(Embarked)
aggregate(train$Fare, by=train$Embarked, FUN=mean)
aggregate(train$Fare, by=list(train$Embarked), FUN=mean)
#승선 항구별 Fare의 평균 출력
train %>%
group_by(Embarked)
#승선 항구별 Fare의 평균 출력
train %>%
group_by(Embarked) %>%
summarise(mean_Embarked = mean(Fare))
#승선 항구별 Fare의 평균 출력
train %>%
group_by(Embarked) %>%
summarise(mean_Embarked = mean(Fare))
#승선 항구별 Fare의 평균 출력
train %>%
group_by(Fare) %>%
summarise(mean_Embarked = mean(Embarked))
#승선 항구별 Fare의 평균 출력
train %<>%
group_by(Fare) %<>%
summarise(mean_Embarked = mean(Embarked))
#승선 항구별 Fare의 평균 출력
train %>%
group_by(Fare) %>%
summarise(mean_Embarked = mean(Embarked))
#승선 항구별 Fare의 평균 출력
train %>%
group_by(Embarked) %>%
summarise(mean_Embarked = mean(Fare))
#승선 항구별 Fare의 평균 출력
library(dplyr)
train %>%
group_by(Embarked) %>%
summarise(mean_Embarked = mean(Fare))
train %>%
group_by(Embarked) %>%
summarise(mean_Embarked = mean(Fare))
aggregate(train$Fare, by=list(train$Embarked), FUN=mean)
# 또는
tapply(train$Fare, train$Embarked, mean)
aggregate(data=train, Fare ~ Embarked, mean)
train[train$Embarked=="",] = 'C'
train=read.csv('f:/data/titanic/train.csv')
test=read.csv('f:/data/titanic/test.csv')
str(train)
head(train)
str(test)
head(test)
# name, ticket, fare, cabin, passengerId 제거
train=train[,-c(1,4,9,10,11)]
test=test[,-c(1,3,8,9,10)]
str(train$Sex)
table(train$Sex)
library(stringr)
library(magrittr)
train$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
test$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
train$Sex = as.integer(train$Sex)
test$Sex = as.integer(test$Sex)
str(train$Embarked)
sum(is.na(train$Embarked))
library(ggplot2)
qplot(train$Embarked)
train$Embarked[train$Embarked ==''] = 'C'
# install.packages("fastDummies")
library(fastDummies)
for_dummy = train[,7]
table(for_dummy)
for_dummy=dummy_cols(for_dummy)[,-1]
train = cbind(train, for_dummy)
train = train[,-7]
train
test$Embarked[test$Embarked ==''] = 'C'
for_dummy = test[,6]
table(for_dummy)
for_dummy=dummy_cols(for_dummy)[,-1]
test = cbind(test, for_dummy)
test = test[,-6]
test
train_age_mean = mean(train$Age, na.rm=TRUE)
train$Age[is.na(train$Age)] = train_age_mean
test_age_mean = mean(test$Age, na.rm=TRUE)
test$Age[is.na(test$Age)] = test_age_mean
head(test$Age)
train$Age = as.integer(train$Age)
test$Age = as.integer(test$Age)
age_level = c()
for(x in 1:length(train$Age)){
if(train$Age[x]<18){
age_level[x] ='child'
}
else if(train$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
train = cbind(train, dum_old)
train
age_level = c()
for(x in 1:length(test$Age)){
if(test$Age[x]<18){
age_level[x] ='child'
}
else if(test$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
test = cbind(test, dum_old)
test
normalize=function(x){
return ((x-min(x)) / (max(x)-min(x)))
}
train$Pclass = normalize(train$Pclass)
test$Pclass = normalize(test$Pclass)
train_y = train$Survived
train = train[,-c(1,4)]
test = test[, -c(3)]
str(train)
str(test)
matrix(train)
matrix(test)
train = scale(train)
test = scale(test)
library(class)
titanic_survive = knn(train, test, cl=train_y, k=12)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
train$Embarked = ifelse(train$Embarked == 'C', 0,
ifelse(train$Embarked=='Q',1,2))
train$Embarked = ifelse(train$Embarked == 'C', 0,
ifelse(train$Embarked=='Q',1,2))
test$Embarked = ifelse(test$Embarked == 'C', 0,
ifelse(test$Embarked=='Q',1,2))
train$Embarked <- ifelse(train$Embarked == 'C', 0,
ifelse(train$Embarked=='Q',1,2))
train1$Embarked <- ifelse(train1$Embarked == 'C', 0, ifelse(train1$Embarked == 'Q',1,2))
train$Embarked
train= read.csv('f:/data/titanic/train.csv')
test= read.csv('f:/data/titanic/test.csv')
train$Embarked
train$Embarked = ifelse(train$Embarked == 'C', 0,
ifelse(train$Embarked=='Q',1,2))
test$Embarked = ifelse(test$Embarked == 'C', 0,
ifelse(test$Embarked=='Q',1,2))
train= read.csv('f:/data/titanic/train.csv')
test= read.csv('f:/data/titanic/test.csv')
str(train)
train=train[,-c(4,9,11)]
str(test)
test=test[,-c(3,8,10)]
train$Sex= ifelse(train$Sex == 'male', 1, 0)
test$Sex= ifelse(test$Sex == 'male', 1, 0)
table(train$Embarked)
sum(is.na(train$Embarked))
train$Embarked[train$Embarked=="",] = 'C'
#승선 항구별 Fare의 평균 출력
library(dplyr)
train %>%
group_by(Embarked) %>%
summarise(mean_Embarked = mean(Fare))
# 또는
aggregate(train$Fare, by=list(train$Embarked), FUN=mean)
aggregate(data=train, Fare ~ Embarked, mean)
# 또는
tapply(train$Fare, train$Embarked, mean)
train$Embarked = ifelse(train$Embarked == 'C', 0,
ifelse(train$Embarked=='Q',1,2))
test$Embarked = ifelse(test$Embarked == 'C', 0,
ifelse(test$Embarked=='Q',1,2))
#na를 평균나이로 대체
train
#na를 평균나이로 대체
is.na(train$Age)
#na를 평균나이로 대체
sum(is.na(train$Age))
na.omit(train$Age)
train_age=na.omit(train$Age)
train_age_avg = mean(train_age)
train_age_avg
train$Age[is.na(train$Age)]=train_age_avg
#na를 평균나이로 대체
sum(is.na(train$Age))
test_age=na.omit(test$Age)
test_age_avg = mean(test_age)
test$Age[is.na(test$Age)]=test_age_avg
train$Age <- ifelse(train$Age < 18, 1, 0)
test$Age <- ifelse(test$Age < 18, 1, 0)
train$Fare
train=read.csv('f:/data/titanic/train.csv')
test=read.csv('f:/data/titanic/test.csv')
str(train)
head(train)
str(test)
head(test)
# name, ticket, fare, cabin, passengerId 제거
train=train[,-c(1,4,9,10,11)]
test=test[,-c(1,3,8,9,10)]
str(train$Sex)
table(train$Sex)
library(stringr)
library(magrittr)
train$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
test$Sex %<>% gsub('female', 1,.) %<>% gsub('male',0, .)
train$Sex = as.integer(train$Sex)
test$Sex = as.integer(test$Sex)
str(train$Embarked)
sum(is.na(train$Embarked))
library(ggplot2)
qplot(train$Embarked)
train$Embarked[train$Embarked ==''] = 'C'
# install.packages("fastDummies")
library(fastDummies)
for_dummy = train[,7]
table(for_dummy)
for_dummy=dummy_cols(for_dummy)[,-1]
train = cbind(train, for_dummy)
train = train[,-7]
train
test$Embarked[test$Embarked ==''] = 'C'
for_dummy = test[,6]
table(for_dummy)
for_dummy=dummy_cols(for_dummy)[,-1]
test = cbind(test, for_dummy)
test = test[,-6]
test
train_age_mean = mean(train$Age, na.rm=TRUE)
train$Age[is.na(train$Age)] = train_age_mean
test_age_mean = mean(test$Age, na.rm=TRUE)
test$Age[is.na(test$Age)] = test_age_mean
head(test$Age)
train$Age = as.integer(train$Age)
test$Age = as.integer(test$Age)
age_level = c()
for(x in 1:length(train$Age)){
if(train$Age[x]<18){
age_level[x] ='child'
}
else if(train$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
train = cbind(train, dum_old)
train
age_level = c()
for(x in 1:length(test$Age)){
if(test$Age[x]<18){
age_level[x] ='child'
}
else if(test$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
test = cbind(test, dum_old)
test
normalize=function(x){
return ((x-min(x)) / (max(x)-min(x)))
}
train$Pclass = normalize(train$Pclass)
test$Pclass = normalize(test$Pclass)
train_y = train$Survived
train = train[,-c(1,4)]
test = test[, -c(3)]
str(train)
str(test)
matrix(train)
matrix(test)
train = scale(train)
test = scale(test)
library(class)
titanic_survive = knn(train, test, cl=train_y, k=25)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
install.packages('foreign')
library(foreign)
library(readxl)
read.spss('f:/data/koweps_hpc10_2015_betal.sav')
read.spss('f:/data/koweps_hpc10_2015_beta1.sav')
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
class(welfare1
class(welfare)
class(welfare)
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
class(welfare)
str(welfare)
str(welfare)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
library(dplyr)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
welfare$sex
table(welfare$sex)
welfare$birth
welfare$marriage
혼인 상태 분석(혼인 비율, 이혼율, ...), 혼인 상태와 급여 관계
종교와 급여 관계, 종교와 이혼율 관계 분석
table(welfare$religion)
welfare$code_job
library(readxl)
read_excel('f:/data/Koweps_Codebook.xlsx')
read_excel('f:/data/Koweps_Codebook.xlsx', sheet = 2)
welfare$income
is.na(welfare$income)
sum(is.na(welfare$income))
sum(is.na(welfare$code_job))
welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean(income))
library(readxl)
