# 스크립트 창
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
## 안녕녕
reticulate::repl_python()
print(2+3)
quit
## ---------------------------------------------------------------------- ##
a <- 1  # a에 1 할당
a       # a 출력
b <- 2
b
c <- 3
c
d <- 3.5
d
a+b
a+b+c
## -------------------------------------------------------------------- ##
var1 <- c(1, 2, 5, 7, 8)    # 숫자 다섯 개로 구성된 var1 생성
var1
var1
## -------------------------------------------------------------------- ##
var1 <- c(1, 2, 5, 7, 8)    # 숫자 다섯 개로 구성된 var1 생성, 벡터
var1
var3 <- seq(1, 5)           # 1~5까지 연속값으로 var3 생성
var3
var4 <- seq(1, 10, by = 2)  # 1~10까지 2 간격 연속값으로 var4 생성
var4
var5 <- seq(1, 10, by = 3)  # 1~10까지 3 간격 연속값으로 var5 생성
var5
var1
var1+2
var1
var2
var2 <- c(1:5)              # 1~5까지 연속값으로 var2 생성
var2 # R에서는 마지막 값 포함
var3 <- seq(1, 5)           # 1~5까지 연속값으로 var3 생성
var3
var4 <- seq(1, 10, by = 2)  # 1~10까지 2 간격 연속값으로 var4 생성
var4
var5 <- seq(1, 10, by = 3)  # 1~10까지 3 간격 연속값으로 var5 생성
var5
var1
var1+2
var1
var2
var1+var2
## -------------------------------------------------------------------- ##
str1 <- "a"
str1
str2 <- "text"
str2
str3 <- "Hello World!"
str3
str4 <- c("a", "b", "c")
str4
str5 <- c("Hello!", "World", "is", "good!")
str5
str1+2
str1+2
## -------------------------------------------------------------------- ##
# 변수 만들기
x <- c(1, 2, 3)
x
# 함수 적용하기
mean(x)
max(x)
min(x)
str5
paste(str5, collapse = ",")  # 쉼표를 구분자로 str4의 단어들 하나로 합치기
paste(str5, collapse = " ")
x_mean <- mean(x)
x_mean
str5_paste <- paste(str5, collapse = " ")
str5_paste
## -------------------------------------------------------------------- ##
# install.packages("ggplot2")  # ggplot2 패키지 설치
library(ggplot2)             # ggplot2 패키지 로드
# 여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
# 빈도 그래프 출력
qplot(x)
## -------------------------------------------------------------------- ##
# install.packages("ggplot2")  # ggplot2 패키지 설치
library(ggplot2)  # 파이썬에 import랑 같은 의미
# 빈도 그래프 출력
qplot(x)
## -------------------------------------------------------------------- ##
# data에 mpg, x축에 hwy 변수 지정하여 그래프 생성
qplot(data = mpg, x = hwy)
# x축 cty
qplot(data = mpg, x = cty)
# x축 drv, y축 hwy
qplot(data = mpg, x = drv, y = hwy)
## -------------------------------------------------------------------- ##
# data에 mpg, x축에 hwy 변수 지정하여 그래프 생성
qplot(data = mpg, x = hwy)
mpg
# x축 drv, y축 hwy
qplot(data = mpg, x = drv, y = hwy)
# x축 drv, y축 hwy, 선 그래프 형태
qplot(data = mpg, x = drv, y = hwy, geom = "line")
# x축 drv, y축 hwy, 상자 그림 형태
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot")
# x축 drv, y축 hwy, 상자 그림 형태, drv별 색 표현
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot", colour = drv)
# qplot 함수 매뉴얼 출력
?qplot
# x축 drv, y축 hwy, 상자 그림 형태, drv별 색 표현
qplot(data = mpg, x = drv, y = hwy, geom = "boxplot", colour = drv)
# qplot 함수 매뉴얼 출력
?qplot
# qplot 함수 매뉴얼 출력
?qplot
english <- c(90, 80, 60, 70)  # 영어 점수 변수 생성
english
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
math
math <- c(50, 60, 100, 20)    # 수학 점수 변수 생성
math
# english, math로 데이터 프레임 생성해서 df_midterm에 할당
df_midterm <- data.frame(english, math)
df_midterm
str(df_midterm)
# obs = observation (관측치)
# 데이터프레임 변수명$컬럼명 <==> # df['컬럼명']
df_midterm$english
class <- c(1, 1, 2, 2)
df_midterm <- data.frame(english, math, class)
class
# english, math로 데이터 프레임 생성해서 df_midterm에 할당
df_midterm <- data.frame(english, math)
df_midterm
class <- c(1, 1, 2, 2)
class
df_midterm <- data.frame(english, math, class)
df_midterm
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
## -------------------------------------------------------------------- ##
# install.packages("readxl")
library(readxl)
df_exam <- read_excel("excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
df_exam <- read_excel("excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam <- read_excel("./data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
df_exam <- read_excel("./data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("./data/excel_exam_novar.xlsx")
df_exam_novar
str(df_midterm)
job=c('student, 'teacher', 'ds', 'housewife'))
data.frame(addr=c('seoul','busan','daegu','incheon'),
age=c(25,35,45,30),
job=c('student', 'teacher', 'ds', 'housewife'))
df_exam_novar <- read_excel("excel_exam_novar.xlsx", col_names = F)
df_exam_novar
df_exam_novar <- read_excel("./data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("./data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
df_exam_novar <- read_excel("./data/excel_exam_novar.xlsx", col_names = F)
# 엑셀 파일의 세 번째 시트에 있는 데이터 불러오기
df_exam_sheet <- read_excel("./data/excel_exam_sheet.xlsx", sheet = 3)
## -------------------------------------------------------------------- ##
# install.packages("readxl")
library(readxl)
df_exam <- read_excel("./data/excel_exam.xlsx")  # 엑셀 파일을 불러와서 df_exam에 할당
df_exam                                   # 출력
mean(df_exam$english)
mean(df_exam$science)
df_exam_novar <- read_excel("./data/excel_exam_novar.xlsx")
df_exam_novar
df_exam_novar <- read_excel("./data/excel_exam_novar.xlsx", col_names = F)
df_exam_novar
# 엑셀 파일의 세 번째 시트에 있는 데이터 불러오기
df_exam_sheet <- read_excel("./data/excel_exam_sheet.xlsx", sheet = 3)
df_exam_sheet
## -------------------------------------------------------------------- ##
df_csv_exam <- read.csv("./data/csv_exam.csv")
df_csv_exam
df_csv_exam <- read.csv("csv_exam.csv")
df_csv_exam <- read.csv("./data/csv_exam.csv")
str(df_midterm)
## -------------------------------------------------------------------- ##
df_midterm <- data.frame(english = c(90, 80, 60, 70),
math = c(50, 60, 100, 20),
class = c(1, 1, 2, 2))
df_midterm
str(df_midterm)
write.csv(df_midterm, file = "df_midterm.csv")
## -------------------------------------------------------------------- ##
save(df_midterm, file = "df_midterm.rda")
load("F:/R_pr/df_midterm.rda")
load("F:/R_pr/df_midterm.rda")
rm(df_midterm)
load("df_midterm.rda")
rm(df_midterm)
## -------------------------------------------------------------------- ##
exam <- read.csv("./data/csv_exam.csv")
head(exam)      # 앞에서부터 6행까지 출력
head(exam, 10)  # 앞에서부터 10행까지 출력
head(exam)      # 앞에서부터 6행까지 출력
tail(exam)      # 뒤에서부터 6행까지 출력
tail(exam, 10)  # 뒤에서부터 10행까지 출력
View(exam)      # 데이터 뷰어 창에서 exam 데이터 확인
dim(exam)       # 행, 열 출력
str(exam)       # 데이터 속성 확인
summary(exam)   # 요약 통계량 출력
## -------------------------------------------------------------------- ##
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)     # Raw 데이터 앞부분 확인
tail(mpg)     # Raw 데이터 뒷부분 확인
mpg
library(ggplot2)
mpg
library(ggplot2)
mpg
## -------------------------------------------------------------------- ##
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)     # Raw 데이터 앞부분 확인
tail(mpg)     # Raw 데이터 뒷부분 확인
# as.타입 => 타입으로 변경 (==astype())
str(mpg)
## -------------------------------------------------------------------- ##
# ggplo2의 mpg 데이터를 데이터 프레임 형태로 불러오기
mpg <- as.data.frame(ggplot2::mpg)
# as.타입 => 타입으로 변경 (==astype())
str(mpg)
## -------------------------------------------------------------------- ##
df_raw <- data.frame(var1 = c(1, 2, 1),
var2 = c(2, 3, 2))
df_raw
# install.packages("dplyr")  # dplyr 설치
library(dplyr)             # dplyr 로드
df_new <- df_raw  # 복사본 생성
df_new            # 출력
df_new <- rename(df_new, v2 = var2)  # var2를 v2로 수정
df_new
## -------------------------------------------------------------------- ##
df <- data.frame(var1 = c(4, 3, 8),
var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
df
df$var_sum <- df$var1 + df$var2       # var_sum 파생변수 생성
df
df$var_mean <- (df$var1 + df$var2)/2  # var_mean 파생변수 생성
df
## -------------------------------------------------------------------- ##
mpg$total <- (mpg$cty + mpg$hwy)/2  # 통합 연비 변수 생성
head(mpg)
mean(mpg$total)  # 통합 연비 변수 평균
mean(mpg$total)  # 통합 연비 변수 평균
## -------------------------------------------------------------------- ##
summary(mpg$total)  # 요약 통계량 산출
hist(mpg$total)     # 히스토그램 생성
# 20이상이면 pass, 그렇지 않으면 fail 부여
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 20)     # 데이터 확인
table(mpg$test)   # 연비 합격 빈도표 생성
mpg&total
mpg$total
# R에는 series가 없다. 벡터라 한다.
names(mpg)
table(mpg$test)   # 연비 합격 빈도표 생성
qplot(mpg$test)   # 연비 합격 빈도 막대 그래프 생성
## -------------------------------------------------------------------- ##
# total을 기준으로 A, B, C 등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
head(mpg, 20)     # 데이터 확인
## -------------------------------------------------------------------- ##
# 1.데이터 준비, 패키지 준비
mpg <- as.data.frame(ggplot2::mpg)  # 데이터 불러오기
library(dplyr)                      # dplyr 로드
library(ggplot2)                    # ggplot2 로드
# 2.데이터 파악
head(mpg)     # Raw 데이터 앞부분
tail(mpg)     # Raw 데이터 뒷부분
View(mpg)     # Raw 데이터 뷰어창에서 확인
dim(mpg)      # 차원
str(mpg)      # 속성
summary(mpg)  # 요약 통계량
# 3.변수명 수정
mpg <- rename(mpg, company = manufacturer)
# 4.파생변수 생성
mpg$total <- (mpg$cty + mpg$hwy)/2                   # 변수 조합
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")  # 조건문 활용
# 5.빈도 확인
table(mpg$test)  # 빈도표 출력
qplot(mpg$test)  # 막대 그래프 생성
## -------------------------------------------------------------------- ##
df_csv_exam <- read.csv("./data/csv_exam.csv")
df_csv_exam
rnorm(100)
mean(rnorm(100))
std(rnorm(100))
x <- matrix(rnorm(100), nrow=5)
x #5행 20열(5건의 데이터, 20차원 데이터라고 가정하자)
dist(x)
x1 <- c(10,20,1,2,3,4)
y1<-c(5,6,7,8,9,10)
a<-rbind(x1, y1)
a
dist(a)
read.csv('F:/data/snsdata.csv')
teens<-read.csv('F:/data/snsdata.csv')
teens
str(teens)
teens$gender
table(teens$gender)
table(teens$gender, useNA = 'ifany')
