basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spag <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
inspect(rules_spaghetti)
library(readxl)
library(arules)
library(ggplot2)
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute') # 상위 20개 시각화화
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10]) # mineral water가 가장 많이 언급됨
# mineral water
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
#향상도 기준으로
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
# {eggs, ground beef} ->{spaghetti}
#향상도 기준으로
# {frozen vegetables, ground beef} ->{spaghetti}
# {eggs, ground beef} ->{spaghetti}
# {ground beef, milk} ->{spaghetti}
install.packages('arulesViz')
# install.packages('arulesViz')
library(arulesViz)
plot(rules_mw, method = 'graph')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
plot(rules_mw, method="graph", engine="graphviz")
plot(rules_mw, method="graph", engine="graphviz")
# install.packages('arulesViz')
install.packages('graphviz')
plot(rules_mw, method="grouped matrix')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
plot(rules_mw, method='grouped matrix')
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
q
q
library(readxl)
library(arules)
library(ggplot2)
basket_data = read.transactions('f:/data/Market_Basket_Optimisation.csv',
format = 'basket',
sep = ',')
summary(basket_data)
inspect(basket_data)
# 상위 item : mineral water, eggs, spaghetti, french fries...
sort(itemFrequency(basket_data, type='absolute'), decreasing=TRUE) # 판매건수
itemFrequencyPlot(basket_data, topN=20, type='absolute') # 상위 20개 시각화화
# apriori() : 규칙들을 생성하는 함수
basket_apr= apriori(basket_data, parameter = list(supp=0.008,
conf=0.25,
target = 'rules',
maxlen = 2))
summary(basket_apr)
inspect(basket_apr[1:10]) # mineral water가 가장 많이 언급됨
# mineral water
basket_apr_mw <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "mineral water"))
rules_mw <- sort(basket_apr_mw, by = "confidence", decreasing = TRUE)
inspect(rules_mw)
inspect(head(sort(basket_apr, by="lift")))
# eggs
basket_apr_eggs <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "eggs"))
rules_eggs <- sort(basket_apr_eggs, by = "confidence", decreasing = TRUE)
inspect(rules_eggs)
# spaghetti
basket_apr_spaghetti <- apriori(basket_data, parameter = list(supp = 0.008, conf = 0.25),
appearance = list(default = "lhs", rhs = "spaghetti"))
rules_spaghetti <- sort(basket_apr_spaghetti, by = "confidence", decreasing = TRUE)
inspect(rules_spaghetti)
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
# install.packages('arulesViz')
library(arulesViz)
# mineral water에 대한 시각화
plot(rules_mw, method = 'graph')
plot(rules_mw, method='grouped matrix')
plot(rules_mw, method = 'paracoord')
# eggs에 대한 시각화
plot(rules_eggs, method = 'graph')
plot(rules_eggs, method = 'paracoord')
plot(rules_eggs, method='grouped matrix')
# spaghetti에 대한 시각화
plot(rules_spaghetti, method = 'graph')
plot(rules_spaghetti, method = 'paracoord')
plot(rules_spaghetti, method='grouped matrix')
lft=inspect(sort(basket_apr, by='lift')[1:50])
con=inspect(sort(basket_apr, by='confidence')[1:50])
sup=inspect(sort(basket_apr, by='support')[1:50])
subset(sup, lhs %in% lft$lhs & rhs %in% lft$rhs)
x = c(8, 3, 6, 6, 9, 4, 3, 9, 3, 4)
y = c(6, 2, 4, 6, 10, 5, 1, 8, 4, 5)
plot(x,y)
cov(x,y)
z = c(-3, -2, -1, 0, 1, 2, 3)
w = c(9, 4, 1, 0, 1, 4, 9).
w = c(9, 4, 1, 0, 1, 4, 9)
cov(z,w)
cor(x,y)
cov(x,y)/(sd(x)*sd(y))
cor(x,y)**2 #상관계수 제곱값인 0
cor(x,y, method='spearman')
cor(x,y, method='kendall')
# p-value는 상관계수가 0이라고 했을 때, 같은 크기의 표본에서
# 관찰된 상관계수보다 더 극단적인 상관계수가 관찰될 확률
# 0.05가 일반적인 임계치
cor.test(x,y)
cars
lm(dist ~ speed)
lm(dist ~ speed, data=cars)
model=lm(dist ~ speed, data=cars)
summary(model)
read.csv('f:/data/crab.csv')
df=read.csv('f:/data/crab.csv')
# fomula = target variable
lm(y ~ sat + weight + width, df)
# fomula = target variable
model=lm(y ~ sat + weight + width, df)
summary(model)
install.packages('car')
# install.packages('car')
library(car)
vif(model)
read.csv('f:/data/challenger.csv')
chal=read.csv('f:/data/challenger.csv')
str(chal)
summary(chal)
table(chal)
table(chal$distress_ct)
plot(x=chal$temperature, y=chal$distress_ct)
lm_chal=lm(distress_ct ~ temperature, data=chal)
summary(lm_chal)
lm_chal$coefficients[1]
lm_chal$coefficients[2]
abline(a=lm_chal$coefficients[1], b=lm_chal$coefficients[2])
abline(a=lm_chal$coefficients[1], b=lm_chal$coefficients[2], col='blue')
insurance = read.csv('f:/data/insurance.csv')
str(insurance)
summary(insurance)
insu = read.csv('f:/data/insurance.csv')
str(insu)
summary(insu)
insu = read.csv('f:/data/insurance.csv', stringsAsFactors = TRUE)
str(insu)
summary(insu)
boxplot(insu$expenses)
hist(insu$expenses)
#상관계수
#cor(x,y)
cor(insu$bmi, insu$expenses)
cor(insu[c('age','bmi','children','expenses')])
pairs(insu[c('age','bmi','children','expenses')])
install.packages('psych')
pairs.panels(insu[c('age','bmi','children','expenses')])
# install.packages('psych')
library(psych)
pairs.panels(insu[c('age','bmi','children','expenses')])
# 다중선형회귀
str(insu)
insu_model=lm(expenses ~ . ,) # .은 expenses을 제외한 나머지 모든 변수
insu_model=lm(expenses ~ . , data=insu) # .은 expenses을 제외한 나머지 모든 변수
insu_model
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
insu$age
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
(insu$age)^2
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
(insu$age)
# insu에 age열 값에 대한 제곱한 값을 갖는 age2라는 열을 추가
insu$age2=(insu$age)^2
insu
insu$age2
insu$bmi
ifelse(insu$bmi >=30, 1, 0)
bmi30=ifelse(insu$bmi >=30, 1, 0)
lm(expenses~age+sex+bmi30+age2, data=insu)
model=lm(expenses~age+sex+bmi30+age2, data=insu)
summary(model)
read.csv('f:/data/examscores.csv')
read.csv('f:/data/examscore.csv')
mydata=read.csv('f:/data/examscore.csv')
# 단순회귀모델(중간 -> 기말)
lm(final~midterm, mydata)
m=mydata$midterm
f=mydata$final
# 기울기 = 상관계수(중간, 기말) * 표준편차(기말)/표준편차(중간)
cor(m,f)
# 기울기 = 상관계수(중간, 기말) * 표준편차(기말)/표준편차(중간)
cor(m,f) * sd(f) / sd(m)
# 기울기 = 상관계수(중간, 기말) * 표준편차(기말)/표준편차(중간)
slope=cor(m,f) * sd(f) / sd(m)
#절편 = 평균(기말) - 평균(중간) * 기울기
bias=mean(f) - mean(m) * slope
bias
f_hat=slope*60+bias
f_hat
data_male=
data_female=
mydata
mydata
mydata$gender == 'F'
mydata[mydata$gender == 'F']
mydata$gender[mydata$gender == 'F']
mydata[mydata$gender == 'F']
mydata[mydata$gender == 'M']
mydata[mydata$gender == 'F']
# mydata[mydata$gender == 'F']
mydata
mydata[mydata$gender == 'M']
str(mydata)
library(dplyr)
mydata[mydata$gender == 'M']
mydata(mydata$gender == 'M')
mydata([mydata$gender == 'M'])
mydata$gender = 'M'
library(dplyr)
mydata$gender = 'M'
mydata$gender == 'M'
mydata[mydata$gender == 'M']
mydata[mydata$gender == 'M',]
data_male=mydata[mydata$gender == 'M',] # 남
data_female=mydata[mydata$gender == 'F',]  # 여
lm(final~midterm, data_male)
lm(final~midterm, data_female)
data_male=mydata[mydata$gender == 'M',] # 남
data_female=mydata[mydata$gender == 'F',]  # 여
lm(final~midterm, data_male)
lm(final~midterm, data_female)
data_female
mydata
mydata=read.csv('f:/data/examscore.csv')
mydata
data_male=mydata[mydata$gender == 'M',] # 남
data_female=mydata[mydata$gender == 'F',]  # 여
lm(final~midterm, data_male)
lm(final~midterm, data_female)
data_female
model1= lm(final~midterm, data_male)
model2= lm(final~midterm, data_female)
model1$coefficients
model2$coefficients
with(mydata,
plot(midterm, final,
xlab="중간",
ylab="기말",
pch=c(16,17)[as.factor(mydata$gender)],
col=c("red","blue")[as.factor(mydata$gender)],
main="점수"))
legend(10,80,
legend=c("여자","남자"),
col=c("red","blue"),
pch=c(16,17))
#직선 그릴 때 사용
abline(model1$coefficients, col='blue')
abline(model2$coefficients, col='red')
#여학생, 중간고사 55점 -> 기말고사 예상점?
predict(model2)
#여학생, 중간고사 55점 -> 기말고사 예상점?
predict(model2, data.frame(midterm==55))
#여학생, 중간고사 55점 -> 기말고사 예상점?
predict(model2, data.frame(midterm=55))
model2$coefficients[2]*55+model2$coefficients[1]
plot(mydata$midterm, mydata$final)
c("red","blue")[as.factor(mydata$gender)]
as.factor(mydata$gender)
m<-c(40,45,50,60,80)
# 단순회귀모델(중간 -> 기말)
lm(final~midterm, mydata)
y=1*x+5
f<-1*m+5
f
lm(final~midterm+gender, mydata)
model3=lm(final~midterm+gender, mydata)
model3
c(0,1)[as.factor(mydata$gender)]
model3$coefficients
model3$coefficients[1]
model3$coefficients[2]
par=model3$coefficients
class(model3$coefficients)
par[1]+par[2]
par[1]+par[2]*60+par[3]*1
predict(model3, newdata=data.frame(midterm=60, gender='F'))
predict(model3, newdata=data.frame(midterm=60, gender='M'))
1+!
1+1
read.csv('f:/data/SeoulBikeData.csv')
bike=read.csv('f:/data/SeoulBikeData.csv')
str(bike)
table(bike)
View(bike)
# 3. 시각화
library(ggplot2)
str(bike)
# 1. 전처리(결측 처리)
is.na(bike)
# 1. 전처리(결측 처리)
sum(is.na(bike))
str(bike)
View(bike)
# 1. 전처리(결측 처리)
bike$Date=as.Date(bike$Date)
bike=read.csv('f:/data/SeoulBikeData.csv')
str(bike)
sum(is.na(bike))
# 1. 전처리(결측 처리)
bike$Date=as.Date(bike$Date)
bike$Year = as.factor(format(bike$Date, '%Y'))
bike$Year
bike$Date
bike$Month = as.factor(format(bike$Date, '%m'))
bike$Month
bike$Day = as.factor(format(bike$Date, '%a'))
bike
bike=read.csv('f:/data/SeoulBikeData.csv')
# 1. 전처리(결측 처리)
bike$Date=as.Date(bike$Date)
bike$Month = as.factor(format(bike$Date, '%m'))
bike$Day = as.factor(format(bike$Date, '%a'))
bike
str(bike)
# Hour
summary(bike$Hour)
na.omit(bike)
colSums(is.na(bike))
bike=read.csv('f:/data/SeoulBikeData.csv')
str(bike)
View(bike)
# 1. 전처리(결측 처리)
sum(is.na(bike))
bike=na.omit(bike)
colSums(is.na(bike))
# Date
bike$Date=as.Date(bike$Date)
bike$Month = as.factor(format(bike$Date, '%m'))
bike$Day = as.factor(format(bike$Date, '%a'))
str(bike)
# Temperature.캜. 변수명 수정
bike <- rename(bike, Temperature = Temperature.캜.)
library(dplyr)                      # dplyr 로드
library(ggplot2)
# Temperature.캜. 변수명 수정
bike <- rename(bike, Temperature = Temperature.캜.)
bike <- rename(bike, Humidity = Humidity...)
bike <- rename(bike, WindSpeed = Wind.speed..m.s.)
# Seasons
bike$Seasons
# Seasons
as.factor(bike$Seasons)
# Seasons
bike$Seasons=as.factor(bike$Seasons)
ifelse(bike$Seasons == 'Spring', 1,
ifelse(bike$Seasons == 'Summer', 2,
ifelse(bike$Seasons == 'Autumn', 3,
ifelse(bike$Seasons == 'Winter', 4,))))
ifelse(bike$Seasons == 'Spring', 1,
ifelse(bike$Seasons == 'Summer', 2,
ifelse(bike$Seasons == 'Autumn', 3,
ifelse(bike$Seasons == 'Winter', 4))))
ifelse(bike$Seasons == 'Spring', 1,
ifelse(bike$Seasons == 'Summer', 2,
ifelse(bike$Seasons == 'Autumn', 3, 4)))
# Seasons
bike$Seasons=ifelse(bike$Seasons == 'Spring', 1,
ifelse(bike$Seasons == 'Summer', 2,
ifelse(bike$Seasons == 'Autumn', 3, 4)))
bike$Seasons=as.factor(bike$Seasons)
# Holiday
bike$Holiday
# Holiday
as.factor(bike$Holiday)
# Holiday
bike$Holiday = ifelse(bike$Holiday == 'Holiday', 1, 2)
bike$Holiday=as.factor(bike$Holiday)
# 2. 상관계수
bike %>%
select(Rented.Bike.Count, Hour, Temperature, Humidity, WindSpeed, Seasons, Holiday)
# 2. 상관계수
bike2=bike %>%
select(Rented.Bike.Count, Hour, Temperature, Humidity, WindSpeed, Seasons, Holiday)
str(bike2)
corr(bike2)
cor(bike2[,c(1:7)], use = "all.obs", method = "pearson")
cor(bike2[,c(1,2,3,4,5)], use = "all.obs", method = "pearson")
cor.test(bike2[,c(1,2,3,4,5)], use = "all.obs", method = "pearson")
bike2 = bike2 %>%
mutate_if(is.integer, as.numeric)
cor.test(bike2[,c(1,2,3,4,5)], use = "all.obs", method = "pearson")
# Seasons
ggplot(bike2, aes(x=Seasons)) +
geom_bar(aes(fill=Seasons)) +
theme_classic()
# Holiday
ggplot(bike2, aes(x=Holiday)) +
geom_bar(aes(fill=Holiday)) +
theme_classic()
()
ggplot(bike2, aes(x=Seasons, y = Rented.Bike.Count)) +
geom_boxplot(aes(fill=Seasons)) +
theme_classic()
ggplot(bike2, aes(x=Holiday, y = Rented.Bike.Count)) +
geom_boxplot(aes(fill=Holiday)) +
theme_classic()
# Hour
ggplot(bike2, aes(x=Hour)) +
geom_density()
# Temperature
ggplot(bike2, aes(x=Temperature)) +
geom_density()
# Humidity
ggplot(bike2, aes(x=Humidity)) +
geom_density()
# WindSpeed
ggplot(bike2, aes(x=WindSpeed)) +
geom_density()
ggplot(bike2, aes(x=Hour, y=Rented.Bike.Count)) +
geom_point()
ggplot(bike2, aes(x=Hour, y=Rented.Bike.Count)) +
geom_point() +
theme_classic()
ggplot(bike2, aes(x=Hour, y=Rented.Bike.Count)) +
geom_point(aes(fill=Hour)) +
theme_classic()
ggplot(bike2, aes(x=Hour, y=Rented.Bike.Count)) +
geom_point(aes(fill=Hour), colour='blue') +
theme_classic()
ggplot(bike2, aes(x=Temperature, y=Rented.Bike.Count)) +
geom_point(aes(fill=Temperature), colour='blue') +
theme_classic()
ggplot(bike2, aes(x=Humidity, y=Rented.Bike.Count)) +
geom_point(aes(fill=Humidity), colour='blue') +
theme_classic()
ggplot(bike2, aes(x=WindSpeed, y=Rented.Bike.Count)) +
geom_point(aes(fill=WindSpeed), colour='blue') +
theme_classic()
# 4. 회귀모델
# 1)회귀모델 <- RBC ~ 독립변수 조합
lm(Rented.Bike.Count ~ Hour + Temperature + Humidity + WindSpeed + Seasons + Holiday)
# 4. 회귀모델
# 1)회귀모델 <- RBC ~ 독립변수 조합
lm(Rented.Bike.Count ~ Hour + Temperature + Humidity + WindSpeed + Seasons + Holiday, bike2)
# 4. 회귀모델
# 1)회귀모델 <- RBC ~ 독립변수 조합
model1=lm(Rented.Bike.Count ~ Hour + Temperature + Humidity + WindSpeed + Seasons + Holiday, bike2)
# lm(formula = Rented.Bike.Count ~ Hour + Temperature + Humidity +
#      WindSpeed + Seasons + Holiday, data = bike2)
#
# Coefficients:
#   (Intercept)         Hour  Temperature     Humidity    WindSpeed     Seasons2     Seasons3     Seasons4     Holiday2
#       462.657       28.567       20.500       -7.600       -3.136       71.484       72.651     -246.232      128.136
summary(model1)
# 다중공선성 파악
library(car)
vif(model1)
bike2[c(1:50),]
train = bike2[c(1:50),]
# WindSpeed는 무의미하므로 제거 후 다시 실행
model2=lm(Rented.Bike.Count ~ Hour + Temperature + Humidity + Seasons + Holiday, bike2)
summary(model2)
predict(model2, newdata=train)
sum(predict(model2, newdata=train))
