train
test$Embarked[test$Embarked ==''] = 'C'
for_dummy = test[,6]
table(for_dummy)
for_dummy=dummy_cols(for_dummy)[,-1]
test = cbind(test, for_dummy)
test = test[,-6]
test
train_age_mean = mean(train$Age, na.rm=TRUE)
train$Age[is.na(train$Age)] = train_age_mean
test_age_mean = mean(test$Age, na.rm=TRUE)
test$Age[is.na(test$Age)] = test_age_mean
head(test$Age)
train$Age = as.integer(train$Age)
test$Age = as.integer(test$Age)
age_level = c()
for(x in 1:length(train$Age)){
if(train$Age[x]<18){
age_level[x] ='child'
}
else if(train$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
train = cbind(train, dum_old)
train
age_level = c()
for(x in 1:length(test$Age)){
if(test$Age[x]<18){
age_level[x] ='child'
}
else if(test$Age[x]<=50){
age_level[x] = 'adult'
}
else{
age_level[x] = 'old'
}
}
head(age_level, 10)
dum_old = dummy_cols(age_level)[-1]
test = cbind(test, dum_old)
test
normalize=function(x){
return ((x-min(x)) / (max(x)-min(x)))
}
train$Pclass = normalize(train$Pclass)
test$Pclass = normalize(test$Pclass)
train_y = train$Survived
train = train[,-c(1,4)]
test = test[, -c(3)]
str(train)
str(test)
matrix(train)
matrix(test)
train = scale(train)
test = scale(test)
library(class)
titanic_survive = knn(train, test, cl=train_y, k=25)
titanic_survive
submission = read.csv('f:/data/titanic/gender_submission.csv')
submission$Survived = titanic_survive
write.csv(submission, 'submission.csv', row.names = F)
install.packages('foreign')
library(foreign)
library(readxl)
read.spss('f:/data/koweps_hpc10_2015_betal.sav')
read.spss('f:/data/koweps_hpc10_2015_beta1.sav')
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
class(welfare1
class(welfare)
class(welfare)
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
class(welfare)
str(welfare)
str(welfare)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
library(dplyr)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
welfare$sex
table(welfare$sex)
welfare$birth
welfare$marriage
혼인 상태 분석(혼인 비율, 이혼율, ...), 혼인 상태와 급여 관계
종교와 급여 관계, 종교와 이혼율 관계 분석
table(welfare$religion)
welfare$code_job
library(readxl)
read_excel('f:/data/Koweps_Codebook.xlsx')
read_excel('f:/data/Koweps_Codebook.xlsx', sheet = 2)
welfare$income
is.na(welfare$income)
sum(is.na(welfare$income))
sum(is.na(welfare$code_job))
welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean(income))
library(readxl)
# install.packages('foreign')
library(foreign)
library(readxl)
library(dplyr)
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
class(welfare)
str(welfare)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
#age를
welfare$sex
table(welfare$sex)
welfare$birth
welfare$marriage
welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean(income))
table(welfare$religion)
welfare$code_job
library(readxl)
read_excel('f:/data/Koweps_Codebook.xlsx')
read_excel('f:/data/Koweps_Codebook.xlsx', sheet = 2)
sum(is.na(welfare$income))
sum(is.na(welfare$code_job))
source("F:/R_pr/Must_Learning_with_R/Must Learning with R5.R", encoding = 'UTF-8')
str(welfare)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
str(welfare)
mylist[[3]][[2]]
myvector<-c(1:6,'a')
myvector
mylist<-list(1:6,'a')
mylist
myvector==unlist(mylist)
myvector
name1<-"Donald"
myspace<-" "
name2<-"Trump"
list(name1, myspace, name2)
unlist(list(name1, myspace, name2))
name<-c("갑","을","병","정")
gender<-c(2,1,1,2)
mydata<-data.frame(name,gender)
mydata
attr(mydata$name, "var")<-"이름"
mydata$name
myvalues<-gender
for(i in 1:length(mydata$gender)){
myvalues[i]<-ifelse(gender[i]==1,"남성","여성")
}
myvalues
#속성값 저장
attr(mydata$gender,"value")<-myvalues
mydata$gender
#속성값 추출
attr(mydata$gender,"value")
mylist<-list(1:4, 6:10, list(1:4,6:10))
mylist
lapply(mylist[[3]],mean)
mylist
lapply(mylist[[3]],mean)
lapply(mylist, mean)
lapply(mylist[c(1,2)],mean)
#sapply : lapply 결과에 대해 unlist를 적용
lapply(mylist[c(1,2)],sum)
unlist(lapply(mylist[c(1,2)],sum))
sapply(mylist[c(1,2)],sum)
letters[22]
LETTERS
tolower("Hi")
toupper("Hi")
nchar("Korea")
tolower("Hi")
toupper("Hi")
nchar("Korea")
nchar("한국")
nchar("Korea", type='bytes')
nchar("한국", type='bytes')
mysentence<-"Learning R is so interesting"
#문장 -> 단어
strsplit(mysentence, split=" ")
#리스트의 첫번째 요소가 벡터, 벡터 내부에는 단어들이 요소값으로 저장
unlist(strsplit(mysentence, split=" "))
mywords<-strsplit(mysentence, split=" ")
mywords[[1]]
strsplit(mywords[[1]][5], split="")
mywords[[1]]
mywords
mywords[[1]]
strsplit(mywords[[1]][5], split="")
myletters<-list(rep(NA,5))
#length(mywords[[1]])
#mywords에 저장된 모든 단어들에 대해 문자로 분해하시오.
for (i in 1:length(mywords[[1]])){
myletters[i]<-strsplit(mywords[[1]][i], split="")
}
myletters
paste(myletters[[1]], collapse = '')
mywords[[1]]
strsplit(mywords[[1]], split="")
paste(myletters[[1]],collapse = '')
paste(myletters[[2]],collapse = '')
paste(myletters[[5]],collapse = '')
mywords2<-list(rep(NA,5))
mywords2
for(i in 1:5){
mywords2[i]<-paste(myletters[[i]],collapse = '')
}
mywords2
R_wiki <- "R is a programming language and software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. Polls, surveys of data miners, and studies of scholarly literature databases show that R's popularity has increased substantially in recent years.
R is a GNU package. The source code for the R software environment is written primarily in C, Fortran, and R. R is freely available under the GNU General Public License, and pre-compiled binary versions are provided for various operating systems. While R has a command line interface, there are several graphical front-ends available."
R_wiki
#문단 단위로 분리
rWikiPara<-strsplit(R_wiki, split="\n")
rWikiPara #리스트의 길이? 1(길이가 2인 벡터 1개가 들어가 있음)
strsplit(R_wiki, split="\\.") #전체 문장(R_wiki)을 문장 단위로 분리
rWikiPara
rWikiSent<-strsplit(rWikiPara[[1]], split="\\.")
#벡터의 요소들을 대상으로 문장 단위로 분리
rWikiSent
#length(rWikiSent)   문단 2 개
#length(rWikiSent[[1]])  첫번째 문단에는 문장이 3개
length(rWikiSent[[2]])  #두번째 문단에는 문장이 4개
rWikiWord<-list(NA,NA)
for(i in 1:2){
rWikiWord[[i]]<-strsplit(rWikiSent[[i]], split=" ")
}
rWikiWord
rWikiWord[[1]][[2]][3] #문단번호 문장번호 단어번호
mysentence<-"Learning R is so interesting"
regexpr("ing", mysentence) #정규표현식
#패턴 매칭된 문자열의 시작위치 리턴
loc.begin<-as.vector(regexpr("ing", mysentence)) #6
loc.length<-attr(regexpr("ing", mysentence), "match.length") #3
#매치된 문자열의 종료위치
loc.end<-loc.begin + loc.length -1
loc.end
mysentence
mysentence<-"Learning R is so interesting"
#문장 -> 단어
strsplit(mysentence, split=" ")
#리스트의 첫번째 요소가 벡터, 벡터 내부에는 단어들이 요소값으로 저장
unlist(strsplit(mysentence, split=" "))
#리스트의 첫번째 요소가 벡터, 벡터 내부에는 단어들이 요소값으로 저장
unlist(unlist(strsplit(mysentence, split=" ")))
#리스트의 첫번째 요소가 벡터, 벡터 내부에는 단어들이 요소값으로 저장
unlist(strsplit(mysentence, split=" "))
mywords<-strsplit(mysentence, split=" ")
mywords
mywords[[1]]
mywords[[1]]
strsplit(mywords[[1]][5], split="")
mywords<-strsplit(mysentence, split=" ")
mywords
mywords[[1]]
mywords
mywords[[1]]
strsplit(mywords[[1]][5], split="")
myletters<-list(rep(NA,5))
length(mywords[[1]])
myletters
myletters[1]
myletters[[1]]
myvector==unlist(mylist)
myvector
name1<-"Donald"
myspace<-" "
name2<-"Trump"
list(name1, myspace, name2)
unlist(list(name1, myspace, name2))
#"Donald_Trump"
c(name1, name2)
#"Donald_Trump"
paste(c(name1, name2))
#"Donald_Trump"
paste(name1, name2)
name<-c("갑","을","병","정")
gender<-c(2,1,1,2)
mydata<-data.frame(name,gender)
mydata
name<-c("갑","을","병","정")
gender<-c(2,1,1,2)
mydata<-data.frame(name,gender)
mydata
mydata$name
attr(mydata$name, "var")<-"이름"
mydata
mydata$name
attr(mydata$name, "var")<-"이름"
mydata$name
attr(mydata$gender, "var")<-"성별"
mydata$gender
myvalues<-gender
myvalues
for(i in 1:length(mydata$gender)){
myvalues[i]<-ifelse(gender[i]==1,"남성","여성")
}
myvalues
myvalues
#속성값 저장
attr(mydata$gender,"value")<-myvalues
mydata$gender
#속성값 추출
attr(mydata$gender,"value")
attributes(mydata)
attributes(mydata$gender)
mylist<-list(1:4, 6:10, list(1:4,6:10))
mylist
lapply(mylist[[3]],mean)
lapply(mylist, mean)
lapply(mylist[c(1,2)],mean)
#sapply : lapply 결과에 대해 unlist를 적용
lapply(mylist[c(1,2)],sum)
unlist(lapply(mylist[c(1,2)],sum))
sapply(mylist[c(1,2)],sum)
unlist(lapply(mylist[c(1,2)],sum))
sapply(mylist[c(1,2)],sum)
letters[22]
LETTERS
tolower("Hi") #소문자 바꿔줌
toupper("Hi") #대문자 바꿔줌
nchar("Korea") #문자 개수 반환
nchar("한국")
nchar("Korea", type='bytes')
nchar("한국", type='bytes')
mysentence<-"Learning R is so interesting"
#문장 -> 단어
strsplit(mysentence, split=" ")
#문장 -> 단어
strsplit(mysentence, split=" ")[1]
#문장 -> 단어
strsplit(mysentence, split=" ")[[1]]
#문장 -> 단어
strsplit(mysentence, split=" ")
#문장 -> 단어
strsplit(mysentence, split=" ")[[1]][1]
#문장 -> 단어
strsplit(mysentence, split=" ")
#리스트의 첫번째 요소가 벡터, 벡터 내부에는 단어들이 요소값으로 저장
unlist(strsplit(mysentence, split=" "))
#리스트의 첫번째 요소가 벡터, 벡터 내부에는 단어들이 요소값으로 저장
unlist(strsplit(mysentence, split=" "))[1]
mywords<-strsplit(mysentence, split=" ")
mywords
mywords[[1]]
strsplit(mywords[[1]][5], split="")
myletters<-list(rep(NA,5))
length(mywords[[1]])
#mywords에 저장된 모든 단어들에 대해 문자로 분해하시오.
mywords
#mywords에 저장된 모든 단어들에 대해 문자로 분해하시오.
sum=0
for(i in length(mywords)){
sum+=1
}
for(i in length(mywords)){
sum= sum +1
}
sum
for (i in 1:length(mywords[[1]])){
myletters[i]<-strsplit(mywords[[1]][i], split="")
}
myletters
#mywords에 저장된 모든 단어들에 대해 문자로 분해하시오.
sum=0
sum
for i in 1:length(mywords){
sum = sum + 1
}
for(i in 1:length(mywords)){
sum = sum + 1
}
sum
mywords
for(i in 1:length(mywords[[1]])){
sum = sum + 1
}
sum
#mywords에 저장된 모든 단어들에 대해 문자로 분해하시오.
sum=0
for(i in 1:length(mywords[[1]])){
sum = sum + 1
}
sum
myletters<-list(rep(NA,5))
for(i in 1:length(mywords[[1]])){
myletters[i]=strsplit(mywords[[1]][i], split='')
}
myletters
myletters
paste(myletters[[1]], collapse = '')
mywords[[1]]
strsplit(mywords[[1]], split="")
paste(myletters[[1]],collapse = '')
paste(myletters[[2]],collapse = '')
paste(myletters[[5]],collapse = '')
mywords2<-list(rep(NA,5))
mywords2
for(i in 1:5){
mywords2[i]<-paste(myletters[[i]],collapse = '')
}
mywords2
R_wiki <- "R is a programming language and software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. Polls, surveys of data miners, and studies of scholarly literature databases show that R's popularity has increased substantially in recent years.
R is a GNU package. The source code for the R software environment is written primarily in C, Fortran, and R. R is freely available under the GNU General Public License, and pre-compiled binary versions are provided for various operating systems. While R has a command line interface, there are several graphical front-ends available."
R_wiki
#문단 단위로 분리
rWikiPara<-strsplit(R_wiki, split="\n")
rWikiPara #리스트의 길이? 1(길이가 2인 벡터 1개가 들어가 있음)
strsplit(R_wiki, split="\\.") #전체 문장(R_wiki)을 문장 단위로 분리
rWikiPara
rWikiSent<-strsplit(rWikiPara[[1]], split="\\.")
#벡터의 요소들을 대상으로 문장 단위로 분리
rWikiSent
#length(rWikiSent)   문단 2 개
#length(rWikiSent[[1]])  첫번째 문단에는 문장이 3개
length(rWikiSent[[2]])  #두번째 문단에는 문장이 4개
rWikiWord<-list(NA,NA)
rWikiWord
# rWikiWord
for(i in 1:2){
rWikiWord[[i]]<-strsplit(rWikiSent[[i]], split=" ")
}
rWikiWord
rWikiWord[[1]][[2]][3] #문단번호 문장번호 단어번호
mysentence<-"Learning R is so interesting"
regexpr("ing", mysentence) #정규표현식
# rWikiWord
for(i in 1:2){
rWikiWord[[i]]<-strsplit(rWikiSent[[i]], split=" ")
}
rWikiWord
mysentence<-"Learning R is so interesting"
regexpr("ing", mysentence) #정규표현식
mysentence<-"Learning R is so interesting"
rWikiWord[[1]][[2]][3] #문단번호 문장번호 단어번호
regexpr("ing", mysentence) #정규표현식
regexpr('23', '23 1414 23')
regexpr("ing", mysentence) #정규표현식
#패턴 매칭된 문자열의 시작위치 리턴
loc.begin<-as.vector(regexpr("ing", mysentence)) #6
loc.begin
# loc.begin
loc.length<-attr(regexpr("ing", mysentence), "match.length") #3
loc.length
#패턴 매칭된 문자열의 시작위치 리턴
loc.begin<-as.vector(regexpr("ing", mysentence)) #6
# loc.begin
loc.length<-attr(regexpr("ing", mysentence), "match.length") #3
# loc.length
#매치된 문자열의 종료위치
loc.end<-loc.begin + loc.length -1
loc.end
mysentence
#전체 데이터에 대해 매칭
gregexpr("ing", mysentence)
gregexpr("ing", mysentence)[[1]]
length(gregexpr("ing", mysentence)[[1]])
loc.begin<-as.vector(gregexpr("ing", mysentence)[[1]])
mysentences<-unlist(rWikiSent)
mysentences
library(tm)
install.package('tm')
install.packages('tm')
library(tm)
s
1+1
library(tm)
1+!
