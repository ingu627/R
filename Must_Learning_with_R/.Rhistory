# - poptotal(전체 인구)을 total 로, popasian(아시아 인구)을 asian 으로 변수명을 수정
midwest$poptotal
# - poptotal(전체 인구)을 total 로, popasian(아시아 인구)을 asian 으로 변수명을 수정
midwest1 = midwest
midwest1 <- rename(midwest1, total = poptotal)
midwest1 = rename(midwest1, total = poptotal)
library(dplyr)
midwest1 = rename(midwest1, total = poptotal)
midwest1 = rename(midwest1, asian = popasian)
# - total, asian 변수를 이용해 '전체 인구 대비 아시아 인구 백분율' 파생변수 생성
midwest1$total
midwest1$asian
midwest1$percent_of_asian = midwest1$asian / midwest1$total
midwest1$percent_of_asian
hist(midwest1$percent_of_asian)
# - 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 "large", 그 외에는 "small"을 부여하는 파생변수 생성
mean_asian = mean(midwest1$percent_of_asian)
mean_asian
# - poptotal(전체 인구)을 total 로, popasian(아시아 인구)을 asian 으로 변수명을 수정
midwest1 = midwest
library(dplyr)
midwest1 = rename(midwest1, total = poptotal)
midwest1 = rename(midwest1, asian = popasian)
# - total, asian 변수를 이용해 '전체 인구 대비 아시아 인구 백분율' 파생변수 생성
midwest1$total
midwest1$asian
sum(midwest1$total)
midwest1$percent_of_asian = midwest1$asian / sum(midwest1$total)
hist(midwest1$percent_of_asian)
# - 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 "large", 그 외에는 "small"을 부여하는 파생변수 생성
mean_asian = mean(midwest1$percent_of_asian)
mean_asian
# - poptotal(전체 인구)을 total 로, popasian(아시아 인구)을 asian 으로 변수명을 수정
midwest1 = midwest
library(dplyr)
midwest1 = rename(midwest1, total = poptotal)
midwest1 = rename(midwest1, asian = popasian)
# - total, asian 변수를 이용해 '전체 인구 대비 아시아 인구 백분율' 파생변수 생성
midwest1$total
midwest1$asian
midwest1$percent_of_asian = midwest1$asian / midwest1$total
hist(midwest1$percent_of_asian)
# - 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 "large", 그 외에는 "small"을 부여하는 파생변수 생성
mean_asian = mean(midwest1$percent_of_asian)
mean_asian
ifelse(midwest1$percent_of_asian > mean_asian, 'large', 'small')
midwest1$large_or_small= ifelse(midwest1$percent_of_asian > mean_asian, 'large', 'small')
# - "large"와 "small"에 해당하는 지역이 얼마나 되는지 빈도수를 출력
ggplot(midwest1, aes(x=factor(large_or_small)))
# - "large"와 "small"에 해당하는 지역이 얼마나 되는지 빈도수를 출력
ggplot(midwest1, aes(x=factor(large_or_small))) +
geom_bar(aes(fill=factor(large_or_small)))
# - "large"와 "small"에 해당하는 지역이 얼마나 되는지 빈도수를 출력
ggplot(midwest1, aes(x=factor(large_or_small))) +
geom_bar(aes(fill=factor(large_or_small))) +
theme_bw()
# - "large"와 "small"에 해당하는 지역이 얼마나 되는지 빈도수를 출력
ggplot(midwest1, aes(x=factor(large_or_small))) +
geom_bar(aes(fill=factor(large_or_small))) +
theme_bw() +
xlab('평균 대비 아시안 비율') + ylab('갯수')
# 3. 타이타닉 데이터 분석
# - 타이타닉 데이터 불러오기
read.csv('f:/data/titanic/train.csv')
# 3. 타이타닉 데이터 분석
# - 타이타닉 데이터 불러오기
titanic= read.csv('f:/data/titanic/train.csv')
head(titanic)
str(titanic)
# - 생존자 수, 사망자 수 출력
table(titanic$Survived)
ggplot(titanic, aes(x=Survived)) +
geom_bar(aes(fill=Survived))
geom_bar(aes(fill=factor(Survived))
ggplot(titanic, aes(x=Survived)) +
geom_bar(aes(fill=factor(Survived)))
ggplot(titanic, aes(x=Survived)) +
geom_bar(aes(fill=factor(Survived)))
# - pclass, embarked 별 승객수 출력(비율)
titanic %>%
group_by(pclass)
# - pclass, embarked 별 승객수 출력(비율)
titanic %>%
group_by('pclass')
# - pclass, embarked 별 승객수 출력(비율)
titanic %>%
group_by('Pclass', 'Embarked')
# - pclass, embarked 별 승객수 출력(비율)
titanic %>%
group_by(Pclass, Embarked)
# - pclass, embarked 별 승객수 출력(비율)
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = sum(PassengerId))
# - pclass, embarked 별 승객수 출력(비율)
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = sum(factor(PassengerId)))
# - pclass, embarked 별 승객수 출력(비율)
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = sum(PassengerId))
titanic
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = count(PassengerId))
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = sum(PassengerId))
titanic$PassengerId
count(titanic$PassengerId)
factor(titanic$PassengerId)
str(titanic)
titanic$Pcount == 1
titanic$Pcount
titanic$Pcount == titanic$PassengerId
titanic$Pcount == titanic$PassengerId
titanic$Pcount
# 3. 타이타닉 데이터 분석
# - 타이타닉 데이터 불러오기
titanic= read.csv('f:/data/titanic/train.csv')
head(titanic)
str(titanic)
# - 생존자 수, 사망자 수 출력
table(titanic$Survived)
ggplot(titanic, aes(x=Survived)) +
geom_bar(aes(fill=factor(Survived)))
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = )
titanic$Pcount = titanic$PassengerId
titanic$Pcount
titanic$Pcount == 1
titanic$Pcount = 1
titanic$Pcount
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = sum(Pcount))
sum(titanic$Pcount)
total=sum(titanic$Pcount)
titanic %>%
group_by(Pclass, Embarked) %>%
summarise(countP = sum(Pcount)/total)
# - Name에서 호칭 종류 출력, 호칭 종류 별 승객수 출력
titanic$Name
library(stringr)
titanic$Name[1]
str_extract(titanic$Name[1], ' [a-zA-Z]+\\.')
str_extract(titanic$Name, ' [a-zA-Z]+\\.')
titanic$name1= str_extract(titanic$Name, ' [a-zA-Z]+\\.')
titanic$name1
titanic$name1[1]
replace(' ', '',titanic$name1[1], values=TRUE )
replace(titanic$name1[1], ' ', '')
str_replace(titanic$name1[1], ' ', '')
str_replace(titanic$name1, ' ', '')
str_replace(titanic$name1, '.', '')
str_replace(titanic$name1, '\\.', '')
titanic$name1= str_replace(titanic$name1, ' ', '')
titanic$name1= str_replace(titanic$name1, '\\.', '')
titanic$name1
str_replace(titanic$name1, c('Mlle', 'Ms', 'Lady', 'Dona'), 'Miss')
str_replace_all(titanic$name1, c('Mlle', 'Ms', 'Lady', 'Dona'), 'Miss')
7 %in% c(7,5,4)
str_replace(titanic$name1, '[Mlle|Ms|Lady|Dona]', 'Miss')
titanic$name1
str_replace(titanic$name1, 'Mlle|Ms|Lady|Dona', 'Miss')
titanic$name1
str_replace(titanic$name1, 'Mme', 'Mrs')
str_replace(titanic$name1, 'Capt', 'Officer')
titanic$name1= str_replace(titanic$name1, 'Mlle|Ms|Lady|Dona', 'Miss')
titanic$name1= str_replace(titanic$name1, 'Mme', 'Mrs')
titanic$name1= str_replace(titanic$name1, 'Capt|Col|Major|Dr|Rev|Don|Sir|the Countess|Jonkheer', 'Officer')
titanic$name1
if %notin%
7 %notin% c(5,4,3)
if %notin%
7 %in% c(5,4,3)
if %notin%
7 %in% !c(5,4,3)
if %notin%
7 %in% c(5,4,3)
if %notin%
7 %in% !(c(5,4,3))
7 %in% !(c(5,4,3))
7 %in% !c(5,4,3)
!(7 %in% c(5,4,3))
titanic$name1
Value(titanic$name1)
value(titanic$name1)
titanic$name1= str_replace(titanic$name1, 'Master|Countess', 'Others')
titanic$name1
# -name2 열을 factor로(5가지 범주) 변환
table(titanic$name1)
as.factor(titanic$name1)
titanic$name1= as.factor(titanic$name1)
# -name2열의 호칭별 인원수 출력
ggplot(titanic, aes(x=name1)) +
geom_bar(aes(fill=name1))
# -호칭 정보를 바탕으로 나이(Age) 결측값 대체(호칭 별 나이의 평균값)
titanic$Name
# -호칭 정보를 바탕으로 나이(Age) 결측값 대체(호칭 별 나이의 평균값)
titanic$Name1
# -호칭 정보를 바탕으로 나이(Age) 결측값 대체(호칭 별 나이의 평균값)
titanic$name
# -호칭 정보를 바탕으로 나이(Age) 결측값 대체
# (호칭 별 나이의 평균값)
str(titanic$Age)
is.na(titanic$Age)
titanic[is.na(titanic$Age)]
titanic$Age[is.na(titanic$Age)]
titanic %>%
group_by(name1) %>%
summarise(name_age = mean(Age))
titanic %>%
group_by(name1) %>%
summarise(name_age = mean(Age, na.rm=T))
titanic %>%
group_by(name1) %>%
summarise(mean_age = mean(Age, na.rm=T))
name_age= titanic %>%
group_by(name1) %>%
summarise(mean_age = mean(Age, na.rm=T))
name_age
name_age[1]
name_age[1][1]
name_age$mean_age
name_age$mean_age[1]
name_age
name_age[name1=='Miss']
name_age[name1==Miss]
name_age[name_age$name1=='Miss']
name_age
sum(is.na(titanic$Age))
colSums(is.na(titanic$Age))
colSums(is.na(titanic))
name_age
name_age$mean_age[1]
name_age
is.na(titanic$Age)
(is.na(titanic$Age)) & (titanic$name1=='Miss')
titanic[(is.na(titanic$Age)) & (titanic$name1=='Miss')]
titanic$Age[(is.na(titanic$Age)) & (titanic$name1=='Miss')]
titanic$Age[(is.na(titanic$Age)) & (titanic$name1=='Miss')] = name_age$mean_age[1]
sum(is.na(titanic$Age))
name_age
titanic$Age[(is.na(titanic$Age)) & (titanic$name1=='Mr')] = name_age$mean_age[2]
titanic$Age[(is.na(titanic$Age)) & (titanic$name1=='Mrs')] = name_age$mean_age[3]
titanic$Age[(is.na(titanic$Age)) & (titanic$name1=='Officer')] = name_age$mean_age[4]
titanic$Age[(is.na(titanic$Age)) & (titanic$name1=='Others')] = name_age$mean_age[5]
titanic %>%
group_by(name1) %>%
summarise(mean_age = mean(Age))
titanic %>%
group_by(name1) %>%
summarise(mean_age = mean(Age),
total_number = sum(name1))
titanic %>%
group_by(name1) %>%
summarise(mean_age = mean(Age))
titanic$Pcount
# -age열의 구간별 인원수 출력
titanic %>%
group_by(name1) %>%
summarise(mean_age = mean(Age),
total_count = sum(Pcount))
ggplot(titanic, aes(x=name1, y=Age)) +
geom_boxplot(aes(x=name1, y=Age))
# 10대 미만, 10대, 20대, 30대, 40대, 50대 이상
ifelse(titanic$Age > 50, '50대 이상',
ifelse(titanic$Age > 40, '40대',
ifelse(titanic$Age > 30, '30대',
ifelse(titanic$Age > 20, '20대', '10대'))))
# 10대 미만, 10대, 20대, 30대, 40대, 50대 이상
ifelse(titanic$Age > 50, '50대이상',
ifelse(titanic$Age > 40, '40대',
ifelse(titanic$Age > 30, '30대',
ifelse(titanic$Age > 20, '20대', '10대'))))
# 10대 미만, 10대, 20대, 30대, 40대, 50대 이상
titanic$age_cat= ifelse(titanic$Age > 50, '50대이상',
ifelse(titanic$Age > 40, '40대',
ifelse(titanic$Age > 30, '30대',
ifelse(titanic$Age > 20, '20대', '10대'))))
ggplot(titanic, aes(x=factor(age_cat)))
geom_bar(aes(fill=factor(age_cat))
ggplot(titanic, aes(x=factor(age_cat))) +
geom_bar(aes(fill=factor(age_cat)))
ggplot(titanic, aes(x=factor(age_cat))) +
geom_bar(aes(fill=factor(age_cat)))
# -cabin 컬럼의 1번째 글자 출력(NA는 제외)
titanic$Cabin
# -cabin 컬럼의 1번째 글자 출력(NA는 제외)
na.omit(titanic$Cabin)
# -cabin 컬럼의 1번째 글자 출력(NA는 제외)
titanic$Cabin
nan
is.na(titanic$Cabin)
sum(is.na(titanic$Cabin))
# -cabin 컬럼의 1번째 글자 출력(NA는 제외)
titanic$Cabin
titanic$Cabin[2]
str(titanic$Cabin[2])
titanic$Cabin[2][1]
list(titanic$Cabin[2])
list(titanic$Cabin[2])[1]
list(titanic$Cabin[2])[[1]
list(titanic$Cabin[2])[[1]]
list(titanic$Cabin[2])[[1]]
list(titanic$Cabin[2])[[1]][1]
titanic$Cabin[2]
substr(titanic$Cabin[2], 1, 1)
substr(titanic$Cabin, 1, 1)
# - fare열 값에 대해 최대/최소/평균/표준편차 출력
summarise(titanic$Fare)
# - fare열 값에 대해 최대/최소/평균/표준편차 출력
str(titanic)
summarise(as.integer(titanic$Fare))
summarise(titanic$Fare)
summarise(titanic)
max(titanic$are)
max(titanic$Fare)
min(titanic$Fare)
mean(titanic$Fare)
sd(titanic$Fare)
# - fare열 값에 대해 최대/최소/평균/표준편차 출력
str(titanic)
# - sibsp + parch를 더하여 새롭게 family열에 저장
titanic$SibSp + titanic$parch
# - sibsp + parch를 더하여 새롭게 family열에 저장
titanic$family = titanic$SibSp + titanic$parch
# - fare열 값에 대해 최대/최소/평균/표준편차 출력
str(titanic)
# - sibsp + parch를 더하여 새롭게 family열에 저장
titanic$family = titanic$SibSp + titanic$Parch
titanic$family
# install.packages('foreign')
library(foreign)
library(readxl)
library(dplyr)
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
class(welfare)
str(welfare)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
#age를
welfare$sex
welfare$birth
welfare$marriage
welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean(income))
# 1. 성별
# 성별에 따른 급여 차이 등 분석 & 시각화
str(welfare)
ggplot(welfare, aes(x=sex, y=income)) +
geom_boxplot()
ggplot(welfare, aes(x=sex, y=income)) +
geom_boxplot(aes(fill=sex))
ggplot(welfare, aes(x=sex, y=income)) +
geom_boxplot(aes(fill=sex, income))
ggplot(welfare, aes(x=sex, y=income)) +
geom_boxplot(aes(x=sex, y=income))
ggplot(welfare, aes(x=factor(sex), y=income)) +
geom_boxplot(aes(x=factor(sex), y=income))
ggplot(welfare, aes(x=factor(sex), y=income)) +
geom_boxplot(aes(fill=factor(sex)))
welfare$birth
2021-1995
# 나이에 따른 급여 차이 등 분석 & 시각화(나이 대 형성)
welfare$age = 2021 - welfare$birth + 1
# 나이에 따른 급여 차이 등 분석 & 시각화(나이 대 형성)
welfare$Age = 2021 - welfare$birth + 1
welfare<-read.spss('f:/data/koweps_hpc10_2015_beta1.sav',
to.data.frame=T)
class(welfare)
str(welfare)
welfare <- rename(welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 태어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직종 코드
code_region = h10_reg7) # 지역 코드
#age를
welfare$sex
table(welfare$sex)
welfare$birth
welfare$marriage
# 1. 성별
# 성별에 따른 급여 차이 등 분석 & 시각화
str(welfare)
welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean(income))
ggplot(welfare, aes(x=factor(sex), y=income)) +
geom_boxplot(aes(fill=factor(sex)))
# 나이에 따른 급여 차이 등 분석 & 시각화(나이 대 형성)
welfare$Age = 2021 - welfare$birth + 1
welfare$age_cat= ifelse(welfare$Age > 50, '50대이상',
ifelse(welfare$Age > 40, '40대',
ifelse(welfare$Age > 30, '30대',
ifelse(welfare$Age > 20, '20대', '10대'))))
welfare$age_cat = as.factor(welfare$age_cat)
ggplot(welfare, aes(x=age_cat, y=income))+
geom_boxplot(aes(fill=age_cat))
# 1. 성별
# 성별에 따른 급여 차이 등 분석 & 시각화
str(welfare)
# 혼인 상태 분석(혼인 비율, 이혼율, ...), 혼인 상태와 급여 관계
welfare$marriage
welfare$birth
# 1. 성별
# 성별에 따른 급여 차이 등 분석 & 시각화
str(welfare)
View(welfare)
# 혼인 상태 분석(혼인 비율, 이혼율, ...), 혼인 상태와 급여 관계
welfare$marriage
# 혼인 상태 분석(혼인 비율, 이혼율, ...), 혼인 상태와 급여 관계
factor(welfare$marriage)
# 혼인 상태 분석(혼인 비율, 이혼율, ...), 혼인 상태와 급여 관계
ggplot(wefare, aes(x=factor(marriage), y=income)) +
geom_boxplot(aes(fill=factor(marriage)))
# 혼인 상태 분석(혼인 비율, 이혼율, ...), 혼인 상태와 급여 관계
ggplot(welfare, aes(x=factor(marriage), y=income)) +
geom_boxplot(aes(fill=factor(marriage)))
# 종교와 급여 관계, 종교와 이혼율 관계 분석
welfare$religion
# 종교와 급여 관계, 종교와 이혼율 관계 분석
ggplot(welfare, aes(x=factor(religion), y=income)) +
geom_boxplot(aes(fill=factor(religion)))
welfare %>%
select(religion, marriage)
df=welfare %>%
select(religion, marriage)
heatmap(df, scale = 'row')
heatmap(df, scale = 'col')
# 종교와 급여 관계, 종교와 이혼율 관계 분석
ggplot(welfare, aes(x=factor(religion), y=income)) +
geom_boxplot(aes(fill=factor(religion)))
# 지역별 연령대 비율표
welfare$code_region
# 지역별 연령대 비율표
ggplot(welfare, aes(x=factor(code_region), y=Age))+
geom_boxplot(aes(fill=code_region))
# 직종코드 기반 급여를 많이 받거나 적게 받는 직종 30개씩 검색
welfare$code_job
# 직종코드 기반 급여를 많이 받거나 적게 받는 직종 30개씩 검색
sort(welfare$code_job)
# 직종코드 기반 급여를 많이 받거나 적게 받는 직종 30개씩 검색
sort(welfare$code_job)[1:30]
sort(welfare$code_job, desc=T)[1:30]
sort(welfare$code_job, desc=TRUE)[1:30]
sort(welfare$code_job, decreasing=TRUE)[1:30]
library(ggplot2)
library(dplyr)
STOCK = read.csv('./Uniqlo.csv')
STOCK
STOCK$Date = as.Date(STOCK$Date)
STOCK$Year = as.factor(format(STOCK$Date, '%Y'))
library(ggplot2)
library(dplyr)
STOCK = read.csv('./Uniqlo.csv')
STOCK$Date = as.Date(STOCK$Date)
STOCK$Year = as.factor(format(STOCK$Date, '%Y'))
as.factor(format(SOTCK$Date, '%a'))
as.factor(format(STOCK$Date, '%a'))
STOCK$Day = as.factor(format(STOCK$Date, '%a'))
Group_Data = STOCK %>%
group_by(Year, Day) %>%
summarise(Mean = round(mean(Open)),
Median = round(median(Open)),
Max = round(max(Open)),
Counts = length(Open))
Group_Data
# 하나의 이산형 변수를 기준으로 x축 변수 1개로만 그리는 경우
ggplot(Group_Data) +
geom_bar(aes(x = as.factor(Counts), fill = ..count..)) +
xlab('') + ylab('')
# 하나의 이산형 변수를 기준으로 x축 변수 1개로만 그리는 경우
ggplot(Group_Data) +
geom_bar(aes(x = as.factor(Counts), fill = ..count..)) +
xlab('') + ylab('') +
scale_fill_gradient(low = '#CCE5FF', high = '#FF00FF')
# 하나의 이산형 변수를 기준으로 x축 변수 1개로만 그리는 경우
ggplot(Group_Data) +
geom_bar(aes(x = as.factor(Counts), fill = ..count..)) +
xlab('') + ylab('') +
scale_fill_gradient(low = '#CCE5FF', high = '#FF00FF') +
theme_classic() + ggtitle('Continuous Color')
ggplot(Group_Data) +
geom_bar(aes(x = as.factor(Counts), fill = Day), alpha .4)
ggplot(Group_Data) +
geom_bar(aes(x = as.factor(Counts), fill = Day), alpha =.4)
ggplot(Group_Data) +
geom_bar(aes(x = as.factor(Counts), fill = Day), alpha =.4) +
# fill 함수는 도형에 색을 채워줄 때 사용
# bar그래프와 오차그래프 등 채울 공간이 있는 도형에 색상을 채운다.
# <-> color 함수는 선의 색깔을 채워줄 때 사용하는 함수
# Bar 그래프의 테두리, Line그래프의 색상,
# 경우에 따라 Point그래프의 Point 테두리 등에 색상을 채워줌
xlab('') + ylab('')+
theme_classic() + ggtitle('Discrete Color')
