mypaper33.pos22.pp
mypaper33.pos22
sum(table(mypaper33.pos22.pp))
mypaper33.pos22.pp
#전체 논문초록에서 등장한 보통명사의 수를 계산해 보자.
#위의 과정을 개인맞춤형 함수로 설정하자.
my.NC.func <- function(mytext) {
myobject <- SimplePos22(mytext)
new.myobject <- mytext
mytextlength <- length(myobject)
mylocation <-
for (i in 1:mytextlength) {
mylocation <- str_locate_all(myobject[i], pattern ='/NC+')
new.myobject[i] <- str_sub(myobject[i], 1, mylocation[[1]][1]-1)
new.myobject[i] <- str_replace_all(new.myobject[i],
"[[:alnum:]]/[[:upper:]]{1,}\\+","")
}
new.myobject <- unlist(new.myobject)
new.myobject <- new.myobject[!is.na(new.myobject)]
new.myobject
}
sum(table(my.NC.func(mypaper[[33]]$content)))
#앞서 분석했던 33번 국문초록 대상 분석결과가 동일한 것을 확인할 수 있음.
sum(table(my.NC.func(mypaper[[33]]$content)))
length(mypaper)
#전체 국문논문 초록에 대해서 적용해 보자.
size.noun <- rep(NA,length(mypaper))
for (j in 1:length(mypaper)){
size.noun[j] <- sum(table(my.NC.func(mypaper[[j]]$content)))
}
size.noun
#최고빈도의, 최저빈도의 보통명사 등장수를 갖는논문초록은?
size.noun <- data.frame(1:length(mypaper),size.noun)
colnames(size.noun) <- c('abstract.no','no.noun')
size.noun[order(size.noun$no.noun),][c(1,length(mypaper)),]
help(package="ldatuning")
library('tm')
library('stringr')
library('ggplot2')
help(package="BTM")
install.packages("bigram")
help(package="SnowballC")
#감정어휘 사전을 활용한 텍스트 감정분석
library("tidytext")
library("textdata") #lexicon 다운로드
library('tidyverse') #stringr, ggplot2 포함
?lexicon_afinn
temp <- lexicon_nrc_eil
temp
temp <- lexicon_nrc_eil()
temp
temp = lexicon_nrc_vad()
temp
cor(temp[2:4])
#감정어휘 사전을 활용한 텍스트 감정분석
library("tidytext")
library("textdata") #lexicon 다운로드
library('tidyverse') #stringr, ggplot2 포함
#lexicon을 이용 데이터 병합
#Affin lexicon 경우
affin_lexicon <- lexicon_afinn()
affin_lexicon
#Bing lexicon 경우
bing_lexicon <- lexicon_bing()
bing_lexicon
#NRC lexicon 경우
NRC_lexicon <- lexicon_nrc()
NRC_lexicon
temp =
lexicon_nrc_eil()
temp
temp %>% filter(AffectDimension == "anger")
temp %>% filter(AffectDimension == "anger") %>% arrange(score)
temp %>% filter(AffectDimension == "anger") %>% filter(score <0.3)
temp %>% filter(AffectDimension == "anger") %>% filter(score <0.6)
temp %>% filter(AffectDimension == "anger") %>% filter(score <0.51)
temp %>% filter(AffectDimension == "anger") %>% filter(score <0.71)
install.packages("translateR")
help(package='translateR')
#감정어휘 사전을 활용한 텍스트 감정분석
library("tidytext")
library("textdata") #lexicon 다운로드
library('tidyverse') #stringr, ggplot2 포함
#아쉽지만 제2판에서는 caret 패키지를 실습해 보자.
library("caret")
#https://github.com/victorneo/Twitter-Sentimental-Analysis
#에서 다운로드 받은 데이터를 사용
setwd("D:/data/Twitter-Sentimental-Analysis-master/")
#각 데이터를 저장
h.train <- readLines("happy.txt")
s.train <- readLines("sad.txt")
h.test <- readLines("happy_test.txt")
s.test <- readLines("sad_test.txt")
#전체 데이터 생성
Htrain <- tibble(text=h.train) %>%
mutate(id=str_c("train_happy_",row_number()))
Htrain
Strain <- tibble(text=s.train) %>%
mutate(id=str_c("train_sad_",row_number()))
Htest <- tibble(text=h.test) %>%
mutate(id=str_c("test_happy_",row_number()))
Stest <- tibble(text=s.test) %>%
mutate(id=str_c("test_sad_",row_number()))
#네 가지 데이터 합치기
dt <- bind_rows(Htrain,Strain,Htest,Stest) %>%
mutate(
type=str_remove_all(str_extract(id,"[[:alpha:]]{3,}_"),"_"),
status=str_remove_all(str_extract(id,"_[[:alpha:]]{3,}_"),"_")
)
dt
#타이디텍스트 맥락에서 텍스트 사전처리
dt_pp <- dt %>%
#사전처리: 문장부호 제거, 숫자제거, 대소문자 통합, 불용문자제거, 불필요공란 제거, 어근동일화
mutate(
text = str_remove_all(text, "[[:punct:]]{1,}"),
text = str_remove_all(text, "[[:digit:]]{1,}"),
text = str_squish(text)
) %>%
unnest_tokens(word,text,"words",to_lower=TRUE) %>%
anti_join(stop_words,by='word') %>%
mutate(word = SnowballC::wordStem(word))
dt_pp
#훈련데이터의 라벨 생성
label_train <- factor(dt$status[dt$type=="train"])
#테스트 데이터의 라벨 생성
label_test <- factor(dt$status[dt$type=="test"])
#훈련데이터의 DTM 생성
dt_train_dtm <- dt_pp %>% filter(type=="train") %>%
#문서*단어별 빈도 구하기
count(id, word) %>%
#DTM 생성
cast_dtm(document=id, term=word, value=n)
dt_train_dtm
dt_train_dtm <- as.matrix(dt_train_dtm)
#테스트데이터에만 등장하는 단어는 배제된 테스트데이터 DTM 생성
dt_test_dtm <- dt_pp %>% filter(type=="test") %>%
full_join(dt_pp %>% filter(type=="train") %>% select(word),by="word") %>%
count(id, word) %>%
cast_dtm(document=id, term=word, value=n)
#21번째가  NA임에 주목
rownames(dt_test_dtm)
dt_test_dtm <- as.matrix(dt_test_dtm)[1:20,]
#Classification tree
#기계훈련
set.seed(20191121) #지정하지 않으면 결과가 조금 다를 수 있음
tree_train <- train(x = as.matrix(dt_train_dtm),
y = factor(label_train),
method="rpart")
table(label_train, predict(tree_train))
76+78
pred_tree_train <- predict(tree_train)
table(label_train, pred_tree_train)
#테스트 데이터에 적용
pred_tree_test <- predict(tree_train,newdata=dt_test_dtm)
table(label_test, pred_tree_test)
?recall
confusionMatrix(label_test, pred_tree_test)
confusionMatrix
confusionMatrix.train
1/0.9091
10/11
recall(table(label_test, pred_tree_test))
specificity(table(label_test, pred_tree_test))
kappa(table(label_test, pred_tree_test))
confusionMatrix(label_test, pred_tree_test)
recall(table(label_test, pred_tree_test))
precision(table(label_test, pred_tree_test))
F_meas(table(label_test, pred_tree_test))
temp = table(label_test, pred_tree_test)
diagonal(temp)
diag(temp)
sum(diag(temp))/sum(temp)
#개인함수를 설정하였다.
quality_index3_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_name <- c("accuracy","kappa","recall","precision","f-score")
index_score <- round(c(index_accuracy,index_kappa,index_recall,index_precision,fscore),3)
data.frame(index_name,index_score)
}
quality_index3_classification(table(label_test, pred_tree_test),3)
mytable <- table(label_test, pred_tree_test)
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_score <- round(c(index_accuracy,index_kappa,index_recall,index_precision,fscore),3)
c(index_accuracy,index_kappa,index_recall,index_precision,fscore)
index_accuracy
index_kappa
temp = kappa(mytable)
temp$coef
index_recall
index_score <- round(c(index_accuracy,index_kappa,index_recall,index_precision,fscore),3)
index_kappa <- kappa(mytable)$coef
index_score <- round(c(index_accuracy,index_kappa,index_recall,index_precision,fscore),3)
index_score
index_kappa
index_kappa <- as.vector(kappa(mytable)$coef)
index_kappa
#개인함수를 설정하였다.
quality_index3_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- as.vector(kappa(mytable)$coef)
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_name <- c("accuracy","kappa","recall","precision","f-score")
index_score <- round(c(index_accuracy,index_kappa,index_recall,index_precision,fscore),3)
data.frame(index_name,index_score)
}
quality_index3_classification(table(label_test, pred_tree_test),3)
#개인함수를 설정하였다.
quality_index3_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)$coef
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_name <- c("accuracy","kappa","recall","precision","f-score")
index_score <- round(c(index_accuracy,index_kappa,index_recall,index_precision,fscore),3)
data.frame(index_name,index_score)
}
quality_index3_classification(table(label_test, pred_tree_test),3)
confusionMatrix(label_test, pred_tree_test)
table(label_test)
table(label_test, pred_tree_test)
recall(table(label_test, pred_tree_test))
precision(table(label_test, pred_tree_test))
0.5*(21/11)
?recall
quality_index3_classification(table(label_test, pred_tree_test),3)
2*(0.909/1.909)
temp = matrix(c(9,0,1,10),2,2)
temp
temp = matrix(c(9,1,0,10),2,2)
quality_index3_classification(temp,3)
temp = data.frame(matrix(c(9,1,0,10),2,2))
quality_index3_classification(temp,3)
temp
temp = as.table(matrix(c(9,1,0,10),2,2))
quality_index3_classification(temp,3)
quality_index3_classification(table(label_test, pred_tree_test),3)
?confusionMatrix
confusionMatrix(label_test, pred_tree_test,dnn="Prediction")
recall(table(label_test, pred_tree_test))
precision(table(label_test, pred_tree_test))
F_meas(table(label_test, pred_tree_test))
quality_index3_classification(table(label_test, pred_tree_test),3)
temp = as.table(matrix(c(9,1,0,10),2,2))
quality_index3_classification(temp,3)
table(label_test, pred_tree_test)
recall(table(label_test, pred_tree_test),reference="happy")
recall(table(label_test, pred_tree_test),reference="sad")
table(pred_tree_train,label_train)
quality_index3_classification(table(label_test, pred_tree_test),3)
temp = as.table(matrix(c(9,1,0,10),2,2))
quality_index3_classification(temp,3)
table(pred_tree_test,label_test)
temp
#테스트 데이터에 적용
pred_tree_test <- predict(tree_train,newdata=dt_test_dtm)
table(pred_tree_test,label_test)
mytab_happy <- table(pred_tree_test,label_test)  #happy를 기준범주로
mytab_sad <- table(fct_rev(pred_tree_test),fct_rev(label_test))  #sad를 기준범주로
mytab_sad
table(pred_tree_test,label_test)  #happy를 기준범주로
#각주: sad를 기준범주로
table(fct_rev(pred_tree_test),fct_rev(label_test))
quality_index3_classification(temp,3)
quality_index3_classification(table(pred_tree_test,label_test),3)
confusionMatrix(pred_tree_test,label_test,reference="happy")
pred_tree_test
label_test
confusionMatrix(pred_tree_test,label_test,reference="happy")
is.factor(label_test)
is.factor(pred_tree_test)
confusionMatrix(table(pred_tree_test,label_test),reference="happy")
confusionMatrix(table(pred_tree_test,label_test),reference="sad")
confusionMatrix(table(pred_tree_test,label_test),reference=2)
confusionMatrix(table(pred_tree_test,label_test),reference=1)
confusionMatrix(table(fct_rev(pred_tree_test),fct_rev(label_test)) )
#개인함수를 설정하였다.
quality_index3_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)$coef
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_name <- c("accuracy","kappa","recall","precision","f-score")
index_score <- round(c(index_accuracy,index_kappa,index_recall,index_precision,fscore),3)
data.frame(index_name,index_score)
}
tab_happy <- table(pred_tree_test,label_test)
quality_index3_classification(tab_happy,3)
#개인함수를 설정하였다.
quality_index3_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)$coef
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_name <- c("accuracy","kappa","precision","recall","f-score")
index_score <- round(c(index_accuracy,index_kappa,index_precision,index_recall,fscore),3)
data.frame(index_name,index_score)
}
tab_happy <- table(pred_tree_test,label_test)
quality_index3_classification(tab_happy,3)
tab_sad <- table(fct_rev(pred_tree_test),fct_rev(label_test))
quality_index3_classification(tab_sad,3)
confusionMatrix(table(pred_tree_test,label_test))
tab_happy <- table(pred_tree_test,label_test)
quality_index3_classification(tab_happy,3)
tab_sad <- table(fct_rev(pred_tree_test),fct_rev(label_test))
quality_index3_classification(tab_sad,3)
precision(table(pred_tree_test,label_test))
recall(table(pred_tree_test,label_test))
F_meas(table(pred_tree_test,label_test))
tab_happy
tab_sad
#개인함수를 설정하였다.
quality_index3_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)$coef
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_name <- c("accuracy","kappa","precision","recall","f-score")
index_score <- round(c(index_accuracy,index_kappa,index_precision,index_recall,fscore),3)
data.frame(index_name,index_score)
}
#happy 기준범주
tab_happy <- table(pred_tree_test,label_test)
quality_index3_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_tree_test),fct_rev(label_test))
quality_index3_classification(tab_sad,3)
!(pred_tree_test==label_test)
c(h.test,s.test)[!(pred_tree_test==label_test)]
tab_happy
#Random forest
#기계훈련
set.seed(20191121) #지정하지 않으면 결과가 조금 다를 수 있음
RF_train <- train(x = as.matrix(dt_train_dtm),
y = factor(label_train),
method = "ranger",   #random forrest 알고리즘 중 상당히 빠름
num.trees = 200)
table(label_train, predict(RF_train))
#테스트 데이터에 적용
pred_RF_test <- predict(RF_train,newdata=dt_test_dtm)
tab_happy <- table(pred_RF_test,label_test)
tab_happy
#happy 기준범주
quality_index3_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_RF_test),fct_rev(label_test))
quality_index3_classification(tab_sad,3)
#어떤 문장인가?
c(h.test,s.test)[!(pred_RF_test==label_test)]
#Neural Network
#기계훈련
set.seed(20191121) #지정하지 않으면 결과가 조금 다를 수 있음
NN_train <- train(x = as.matrix(dt_train_dtm),
y = factor(label_train),
method = "nnet")
table(label_train, predict(NN_train))
#테스트 데이터에 적용
pred_NN_test <- predict(NN_train,newdata=dt_test_dtm)
tab_happy <- table(pred_NN_test,label_test)
tab_happy
#happy 기준범주
quality_index3_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_NN_test),fct_rev(label_test))
quality_index3_classification(tab_sad,3)
#어떤 문장인가?
c(h.test,s.test)[!(pred_NN_test==label_test)]
#Classification tree
#기계훈련
set.seed(20191123) #지정하지 않으면 결과가 조금 다를 수 있음
tree_train <- train(x = as.matrix(dt_train_dtm),
y = factor(label_train),
method="rpart")
pred_tree_train <- predict(tree_train)
table(pred_tree_train,label_train)
#테스트 데이터에 적용
pred_tree_test <- predict(tree_train,newdata=dt_test_dtm)
table(pred_tree_test,label_test)  #happy를 기준범주로
#어떤 문장인가?
c(h.test,s.test)[!(pred_tree_test==label_test)]
dt_test_dtm
dt_test_dtm[16,]
dt_test_dtm[16,] %>% table()
dt
dt[160+16,]
#Random forest
#기계훈련
set.seed(20191121) #지정하지 않으면 결과가 조금 다를 수 있음
RF_train <- train(x = as.matrix(dt_train_dtm),
y = factor(label_train),
method = "ranger",   #random forrest 알고리즘 중 상당히 빠름
num.trees = 200)
table(label_train, predict(RF_train))
table(predict(RF_train), label_train)
#테스트 데이터에 적용
pred_RF_test <- predict(RF_train,newdata=dt_test_dtm)
tab_happy <- table(pred_RF_test,label_test)
tab_happy
table(pred_tree_test,label_test)  #happy를 기준범주로
tab_happy
tab_sad
confusionMatrix(table(pred_tree_test,label_test))
confusionMatrix(table(fct_rev(pred_tree_test),fct_rev(label_test)))
#happy 기준범주
quality_index_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_RF_test),fct_rev(label_test))
quality_index_classification(tab_sad,3)
fscore <- F_meas(mytable)
#happy 기준범주
quality_index_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_RF_test),fct_rev(label_test))
quality_index_classification(tab_sad,3)
#개인함수를 설정하였다.
quality_index_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)$coef
index_recall <- recall(mytable)
index_precision <- precision(mytable)
fscore <- F_meas(mytable)
index_name <- c("accuracy","kappa","precision","recall","f-score")
index_score <- round(c(index_accuracy,index_kappa,index_precision,index_recall,fscore),3)
data.frame(index_name,index_score)
}
#happy 기준범주
quality_index_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_RF_test),fct_rev(label_test))
quality_index_classification(tab_sad,3)
#Neural Network
#기계훈련
set.seed(20191121) #지정하지 않으면 결과가 조금 다를 수 있음
NN_train <- train(x = as.matrix(dt_train_dtm),
y = factor(label_train),
method = "nnet")
table(label_train, predict(NN_train))
table(predict(NN_train), label_train)
#테스트 데이터에 적용
pred_NN_test <- predict(NN_train,newdata=dt_test_dtm)
tab_happy <- table(pred_NN_test,label_test)
tab_happy
specificity(table(pred_tree_test,label_test))
#개인함수를 설정하였다.
quality_index_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)$coef
index_recall <- recall(mytable)
index_precision <- precision(mytable)
index_fscore <- F_meas(mytable)
index_specificity <- specificity(mytable)
index_name <- c("accuracy","kappa","precision","recall","f-score")
index_score <- round(c(index_accuracy,index_kappa,
index_precision,index_recall,
index_fscore,index_specificity),3)
data.frame(index_name,index_score)
}
#happy 기준범주
tab_happy <- table(pred_tree_test,label_test)
quality_index_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_tree_test),fct_rev(label_test))
quality_index_classification(tab_sad,3)
index_name <- c("accuracy","kappa","precision","recall","f-score","specificity")
#개인함수를 설정하였다.
quality_index_classification <- function(mytable,myround){
index_accuracy <- sum(diag(mytable))/sum(mytable)
index_kappa <- kappa(mytable)$coef
index_recall <- recall(mytable)
index_precision <- precision(mytable)
index_fscore <- F_meas(mytable)
index_specificity <- specificity(mytable)
index_name <- c("accuracy","kappa","precision","recall","f-score","specificity")
index_score <- round(c(index_accuracy,index_kappa,
index_precision,index_recall,
index_fscore,index_specificity),3)
data.frame(index_name,index_score)
}
#happy 기준범주
tab_happy <- table(pred_tree_test,label_test)
quality_index_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_tree_test),fct_rev(label_test))
quality_index_classification(tab_sad,3)
#테스트 데이터에 적용
pred_RF_test <- predict(RF_train,newdata=dt_test_dtm)
tab_happy <- table(pred_RF_test,label_test)
tab_happy
#happy 기준범주
quality_index_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_RF_test),fct_rev(label_test))
quality_index_classification(tab_sad,3)
#happy 기준범주
quality_index_classification(tab_happy,3)
#sad 기준범주
tab_sad <- table(fct_rev(pred_NN_test),fct_rev(label_test))
quality_index_classification(tab_sad,3)
